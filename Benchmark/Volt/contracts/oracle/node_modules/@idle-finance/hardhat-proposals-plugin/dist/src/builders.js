"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AlphaProposalBuilder = void 0;
const ethers_1 = require("ethers");
const utils_1 = require("ethers/lib/utils");
const plugins_1 = require("hardhat/plugins");
const VotingToken__factory_1 = require("./ethers-contracts/factories/VotingToken__factory");
const GovernorAlpha__factory_1 = require("./ethers-contracts/factories/GovernorAlpha__factory");
const proposals_1 = require("./proposals/proposals");
class AlphaProposalBuilder {
    constructor(hre, governor, votingToken, maxActions) {
        this.hre = hre;
        this.ethersProvider = hre.ethers.provider;
        if (governor instanceof ethers_1.Contract) {
            this.governor = governor;
        }
        else if (typeof governor === 'string' && governor !== "") {
            this.governor = GovernorAlpha__factory_1.GovernorAlpha__factory.connect(governor, this.ethersProvider);
        }
        if (votingToken instanceof ethers_1.Contract) {
            this.votingToken = votingToken;
        }
        else if (typeof votingToken === 'string' && votingToken !== "") {
            this.votingToken = VotingToken__factory_1.VotingToken__factory.connect(votingToken, this.ethersProvider);
        }
        this.maxActions = maxActions || 10;
        this.proposal = new proposals_1.AlphaProposal(hre, this.governor, this.votingToken);
    }
    setGovernor(governor) {
        let _governor;
        if (governor instanceof ethers_1.Contract) {
            _governor = governor;
        }
        else if (typeof governor === 'string') {
            _governor = GovernorAlpha__factory_1.GovernorAlpha__factory.connect(governor, this.ethersProvider);
        }
        else {
            throw new plugins_1.HardhatPluginError("hardhat-proposals-plugin", "Invalid governor");
        }
        this.governor = _governor;
        this.proposal.setGovernor(_governor);
        return this;
    }
    setVotingToken(votingToken) {
        let _votingToken;
        if (votingToken instanceof ethers_1.Contract) {
            _votingToken = votingToken;
        }
        else if (typeof votingToken === 'string') {
            _votingToken = VotingToken__factory_1.VotingToken__factory.connect(votingToken, this.ethersProvider);
        }
        else {
            throw new plugins_1.HardhatPluginError("hardhat-proposals-plugin", "Invalid governor");
        }
        this.votingToken = _votingToken;
        this.proposal.setVotingToken(_votingToken);
        return this;
    }
    setProposer(proposer) {
        this.proposal.proposer = proposer;
        return this;
    }
    addAction(contract, method, args, value = 0) {
        if (this.proposal.targets.length >= this.maxActions) {
            throw new plugins_1.HardhatPluginError("hardhat-proposals-plugin", "Too many actions on proposal");
        }
        // get function signature
        const _interface = contract.interface;
        const functionFragment = _interface.getFunction(method);
        const signature = functionFragment.format(utils_1.FormatTypes.sighash);
        if (functionFragment.inputs.length != args.length) {
            throw new plugins_1.HardhatPluginError("hardhat-proposals-plugin", "arguments length do not match signature");
        }
        // encode function call data
        const functionData = _interface.encodeFunctionData(functionFragment, args);
        const functionArgs = _interface.decodeFunctionData(functionFragment, functionData);
        const calldata = utils_1.hexDataSlice(functionData, 4); // Remove the sighash from the function data
        this.proposal.targets.push(contract.address);
        this.proposal.values.push(ethers_1.BigNumber.from(value));
        this.proposal.signatures.push(signature);
        this.proposal.calldatas.push(calldata);
        this.proposal.contracts.push(contract);
        this.proposal.args.push(functionArgs);
        return this;
    }
    setDescription(description) {
        this.proposal.description = description;
        return this;
    }
    build() {
        return this.proposal;
    }
}
exports.AlphaProposalBuilder = AlphaProposalBuilder;
//# sourceMappingURL=builders.js.map