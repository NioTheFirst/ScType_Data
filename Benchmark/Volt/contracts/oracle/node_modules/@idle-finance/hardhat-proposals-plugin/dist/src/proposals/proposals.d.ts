import { BigNumber, BytesLike, Contract, Signer, BigNumberish } from "ethers";
import { JsonRpcProvider } from "@ethersproject/providers";
import { Result } from "ethers/lib/utils";
import { EthereumProvider, HardhatRuntimeEnvironment } from "hardhat/types";
import { GovernorAlpha, VotingToken } from "../ethers-contracts/index";
import { IAlphaProposal } from "../types";
export declare class AlphaProposal implements IAlphaProposal {
    /**
     */
    private readonly hre;
    readonly ethersProvider: JsonRpcProvider;
    readonly provider: EthereumProvider;
    governor?: GovernorAlpha;
    votingToken?: VotingToken;
    id: BigNumber;
    proposer: Signer | null;
    targets: string[];
    values: BigNumber[];
    signatures: string[];
    calldatas: BytesLike[];
    description: string;
    contracts: (Contract | null)[];
    args: (Result)[];
    constructor(hre: HardhatRuntimeEnvironment, governor?: GovernorAlpha, votingToken?: VotingToken);
    setGovernor(governor: GovernorAlpha): void;
    setVotingToken(votingToken: VotingToken): void;
    _ready(): boolean;
    propose(proposer?: Signer): Promise<void>;
    loadFromId(id: BigNumberish): Promise<void>;
    private proposalSubmitted;
    private getProposalState;
    vote(signer: Signer, support?: boolean): Promise<void>;
    queue(signer?: Signer): Promise<void>;
    execute(signer?: Signer): Promise<void>;
    simulate(): Promise<void>;
    printProposalInfo(): Promise<void>;
}
//# sourceMappingURL=proposals.d.ts.map