"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.factoryDeploy = void 0;
// exports a generic factoryDeploy using the generic minimal proxy factories
const chalk_1 = __importDefault(require("chalk"));
const fs_1 = require("fs");
const GenericProxyFactory_json_1 = __importDefault(require("../abis/GenericProxyFactory.json"));
const getGenericProxyFactoryForNetwork_1 = require("./helpers/getGenericProxyFactoryForNetwork");
const ethers_1 = require("ethers");
const displayLogs = !process.env.HIDE_DEPLOY_LOG;
function dim(logMessage) {
    if (displayLogs) {
        console.log(chalk_1.default.dim(logMessage));
    }
}
function cyan(logMessage) {
    if (displayLogs) {
        console.log(chalk_1.default.cyan(logMessage));
    }
}
function yellow(logMessage) {
    if (displayLogs) {
        console.log(chalk_1.default.yellow(logMessage));
    }
}
function green(logMessage) {
    if (displayLogs) {
        console.log(chalk_1.default.green(logMessage));
    }
}
function factoryDeploy(deploySettings) {
    return __awaiter(this, void 0, void 0, function* () {
        const provider = deploySettings.provider;
        let networkName = (yield provider.getNetwork()).name;
        let initializeData;
        if (!deploySettings.initializeData) {
            initializeData = "0x";
        }
        else {
            initializeData = deploySettings.initializeData;
        }
        let skipIfAlreadyDeployed;
        if (deploySettings.skipIfAlreadyDeployed === undefined) {
            skipIfAlreadyDeployed = false;
        }
        else {
            skipIfAlreadyDeployed = true;
        }
        if (skipIfAlreadyDeployed && fs_1.existsSync(`./deployments/${networkName}/${deploySettings.contractName}.json`)) {
            cyan(`Using existing implementation for ${deploySettings.contractName}`);
            // contract already exists -- read info for return object
            const previouslyDeployedContract = JSON.parse(yield fs_1.readFileSync(`./deployments/${networkName}/${deploySettings.contractName}.json`, { encoding: "utf-8" }));
            return {
                newlyDeployed: false,
                address: previouslyDeployedContract.address,
                transactionHash: previouslyDeployedContract.transactionHash,
                receipt: previouslyDeployedContract.receipt,
            };
        }
        // get address of minimal proxy factory
        const chainId = (yield provider.getNetwork()).chainId;
        if (chainId === 31337 || chainId === 1337) { // network name "unknown" for the test networks
            networkName = "localhost";
        }
        let genericProxyFactoryAddress = getGenericProxyFactoryForNetwork_1.getGenericProxyFactoryAddressForChainId(chainId);
        // if no generic proxy factory -- create one
        if (genericProxyFactoryAddress == "") {
            dim(`No GenericProxyFactory deployment found. Deploying a new GenericProxyFactory`);
            const genericProxyFactoryInterface = new ethers_1.ethers.utils.Interface(GenericProxyFactory_json_1.default.abi);
            const genericProxyFactoryContractFactory = new ethers_1.ethers.ContractFactory(genericProxyFactoryInterface, GenericProxyFactory_json_1.default.bytecode, deploySettings.signer);
            const genericProxyFacoryContract = yield genericProxyFactoryContractFactory.deploy();
            yield genericProxyFacoryContract.deployTransaction.wait();
            genericProxyFactoryAddress = genericProxyFacoryContract.address;
            green(`Deployed GenericProxyFactory for ${networkName} at ${genericProxyFactoryAddress}`);
            dim(`If this is not a test network, consider adding to the generic proxy factory repo constants`);
        }
        if (!genericProxyFactoryAddress) {
            throw new Error(`No GenericProxyFactory deployed for this network ()`);
        }
        cyan(`GenericProxyFactory for network ${networkName} at address ${genericProxyFactoryAddress}`);
        // grab abi and connect to contract instance
        const genericProxyFactoryContract = new ethers_1.ethers.Contract(genericProxyFactoryAddress, GenericProxyFactory_json_1.default.abi, deploySettings.signer);
        dim(`Creating Proxy...implementationAddress: ${deploySettings.implementationAddress}, initializeData: ${initializeData}`);
        const createProxyResult = yield genericProxyFactoryContract.create(deploySettings.implementationAddress, initializeData);
        dim(`Awaiting transaction confirmation...`);
        yield provider.waitForTransaction(createProxyResult.hash);
        const receipt = yield provider.getTransactionReceipt(createProxyResult.hash);
        const createdEvent = genericProxyFactoryContract.interface.parseLog(receipt.logs[0]);
        green(`Proxy for ${deploySettings.contractName} created at ${createdEvent.args.created}`);
        const bytecode = yield provider.getCode(createdEvent.args.created);
        const jsonObj = {
            address: createdEvent.args.created,
            transactionHash: receipt.transactionHash,
            receipt: receipt,
            args: deploySettings === null || deploySettings === void 0 ? void 0 : deploySettings.initializeData,
            bytecode: bytecode
        };
        const pathFileBase = `./deployments/${networkName}`;
        const pathFile = `${pathFileBase}/${deploySettings.contractName}.json`;
        fs_1.mkdirSync(pathFileBase, { recursive: true });
        fs_1.writeFileSync(pathFile, JSON.stringify(jsonObj, null, 3), { encoding: 'utf8', flag: 'w' });
        dim(`Deployments file saved at ${pathFile}`);
        return {
            newlyDeployed: true,
            address: createdEvent.args.created,
            transactionHash: createProxyResult.hash,
            receipt: receipt,
        };
    });
}
exports.factoryDeploy = factoryDeploy;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVwbG95LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2RlcGxveS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFBQSw0RUFBNEU7QUFDNUUsa0RBQTBCO0FBQzFCLDJCQUF3RTtBQUV4RSxnR0FBa0U7QUFFbEUsaUdBQWtHO0FBQ2xHLG1DQUFrRDtBQUlsRCxNQUFNLFdBQVcsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDO0FBRWpELFNBQVMsR0FBRyxDQUFDLFVBQWtCO0lBQzdCLElBQUksV0FBVyxFQUFFO1FBQ2YsT0FBTyxDQUFDLEdBQUcsQ0FBQyxlQUFLLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7S0FDcEM7QUFDSCxDQUFDO0FBRUQsU0FBUyxJQUFJLENBQUMsVUFBa0I7SUFDOUIsSUFBSSxXQUFXLEVBQUU7UUFDZixPQUFPLENBQUMsR0FBRyxDQUFDLGVBQUssQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztLQUNyQztBQUNILENBQUM7QUFFRCxTQUFTLE1BQU0sQ0FBQyxVQUFrQjtJQUNoQyxJQUFJLFdBQVcsRUFBRTtRQUNmLE9BQU8sQ0FBQyxHQUFHLENBQUMsZUFBSyxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO0tBQ3ZDO0FBQ0gsQ0FBQztBQUVELFNBQVMsS0FBSyxDQUFDLFVBQWtCO0lBQy9CLElBQUksV0FBVyxFQUFFO1FBQ2YsT0FBTyxDQUFDLEdBQUcsQ0FBQyxlQUFLLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7S0FDdEM7QUFDSCxDQUFDO0FBaURELFNBQXNCLGFBQWEsQ0FBQyxjQUFxQzs7UUFFckUsTUFBTSxRQUFRLEdBQUcsY0FBYyxDQUFDLFFBQVEsQ0FBQTtRQUN4QyxJQUFJLFdBQVcsR0FBRyxDQUFDLE1BQU0sUUFBUSxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUMsSUFB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