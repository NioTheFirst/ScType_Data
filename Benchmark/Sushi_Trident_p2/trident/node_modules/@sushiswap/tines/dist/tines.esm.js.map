{"version":3,"file":"tines.esm.js","sources":["../src/Utils.ts","../src/PrimaryPools.ts","../src/MultiRouter.ts","../src/deprecated/MultiRouterTypes.ts","../src/deprecated/MultiRouterMath.ts"],"sourcesContent":["import { BigNumber } from \"@ethersproject/bignumber\";\r\n\r\nexport function ASSERT(f: () => boolean, t?: string) {\r\n    if (!f() && t) console.error(t);\r\n  }\r\n  \r\n  export function closeValues(a: number, b: number, accuracy: number): boolean {\r\n    if (accuracy === 0) return a === b;\r\n    if (a < 1 / accuracy) return Math.abs(a - b) <= 10;\r\n    return Math.abs(a / b - 1) < accuracy;\r\n  }\r\n  \r\n  export function calcSquareEquation(\r\n    a: number,\r\n    b: number,\r\n    c: number\r\n  ): [number, number] {\r\n    const D = b * b - 4 * a * c;\r\n    console.assert(D >= 0, `Discriminant is negative! ${a} ${b} ${c}`);\r\n    const sqrtD = Math.sqrt(D);\r\n    return [(-b - sqrtD) / 2 / a, (-b + sqrtD) / 2 / a];\r\n  }\r\n  \r\n  // returns such x > 0 that f(x) = out or 0 if there is no such x or f defined not everywhere\r\n  // hint - approximation of x to spead up the algorithm\r\n  // f assumed to be continues monotone growth function defined everywhere\r\n  export function revertPositive(\r\n    f: (x: number) => number,\r\n    out: number,\r\n    hint = 1\r\n  ) {\r\n    try {\r\n      if (out <= f(0)) return 0;\r\n      let min, max;\r\n      if (f(hint) > out) {\r\n        min = hint / 2;\r\n        while (f(min) > out) min /= 2;\r\n        max = min * 2;\r\n      } else {\r\n        max = hint * 2;\r\n        while (f(max) < out) max *= 2;\r\n        min = max / 2;\r\n      }\r\n  \r\n      while (max / min - 1 > 1e-4) {\r\n        const x0: number = (min + max) / 2;\r\n        const y0 = f(x0);\r\n        if (out === y0) return x0;\r\n        if (out < y0) max = x0;\r\n        else min = x0;\r\n      }\r\n      return (min + max) / 2;\r\n    } catch (e) {\r\n      return 0;\r\n    }\r\n  }\r\n  \r\n  export function getBigNumber(\r\n    value: number\r\n  ): BigNumber {\r\n    if (value < Number.MAX_SAFE_INTEGER) return BigNumber.from(Math.round(value));\r\n  \r\n    const exp = Math.floor(Math.log(value) / Math.LN2);\r\n    console.assert(exp >= 51, \"Internal Error 314\");\r\n    const shift = exp - 51;\r\n    const mant = Math.round(value / Math.pow(2, shift));\r\n    const res = BigNumber.from(mant).mul(BigNumber.from(2).pow(shift));\r\n    return res;\r\n  }\r\n  ","import { BigNumber } from \"@ethersproject/bignumber\";\r\nimport { getBigNumber, revertPositive } from \"./Utils\";\r\n\r\nconst TYPICAL_SWAP_GAS_COST = 40_000\r\nconst TYPICAL_MINIMAL_LIQUIDITY = 1000\r\n\r\nexport interface RToken {\r\n  name: string;\r\n  address: string;\r\n}\r\n\r\nexport abstract class RPool {\r\n  readonly address: string;\r\n    readonly token0: RToken;\r\n    readonly token1: RToken;\r\n    readonly fee: number;\r\n    reserve0: BigNumber;\r\n    reserve1: BigNumber;\r\n    readonly minLiquidity: number;\r\n    readonly swapGasCost: number;\r\n\r\n    constructor(\r\n      address: string,\r\n      token0: RToken,\r\n      token1: RToken,\r\n      fee: number,\r\n      reserve0: BigNumber,\r\n      reserve1: BigNumber,\r\n      minLiquidity = TYPICAL_MINIMAL_LIQUIDITY,\r\n      swapGasCost = TYPICAL_SWAP_GAS_COST,\r\n    ) {\r\n      this.address = address\r\n      this.token0 = token0,\r\n      this.token1 = token1;\r\n      this.fee = fee;\r\n      this.minLiquidity = minLiquidity;\r\n      this.swapGasCost = swapGasCost;\r\n      this.reserve0 = reserve0;\r\n      this.reserve1 = reserve1;\r\n    }\r\n\r\n    // Returns [<output amount>, <gas consumption estimation>]\r\n    abstract calcOutByIn(amountIn: number, direction: boolean): [number, number];\r\n    abstract calcInByOut(amountOut: number, direction: boolean): [number, number];\r\n    abstract calcPrice(amountIn: number, direction: boolean, takeFeeIntoAccount: boolean): number;\r\n    abstract calcInputByPrice(price: number, direction: boolean, takeFeeIntoAccount: boolean, hint: number): number;\r\n}\r\n\r\n// TODO: cache BN -> number transform\r\nexport class ConstantProductRPool extends RPool {\r\n\r\n    constructor(\r\n      address: string,\r\n      token0: RToken,\r\n      token1: RToken,\r\n      fee: number,\r\n      reserve0: BigNumber,\r\n      reserve1: BigNumber,\r\n    ) {\r\n        super(\r\n          address,\r\n          token0,\r\n          token1,\r\n          fee,\r\n          reserve0,\r\n          reserve1,\r\n        );\r\n    }\r\n\r\n  calcOutByIn(amountIn: number, direction: boolean): [number, number] {\r\n    const xBN = direction ? this.reserve0 : this.reserve1;\r\n    const yBN = direction ? this.reserve1 : this.reserve0;\r\n    const x = parseInt(xBN.toString());\r\n    const y = parseInt(yBN.toString());\r\n    return [(y * amountIn) / (x / (1 - this.fee) + amountIn), this.swapGasCost];\r\n  }\r\n\r\n  calcInByOut(amountOut: number, direction: boolean): [number, number] {\r\n    const xBN = direction ? this.reserve0 : this.reserve1;\r\n    const yBN = direction ? this.reserve1 : this.reserve0;\r\n    const x = parseInt(xBN.toString());\r\n    const y = parseInt(yBN.toString());\r\n    let input = (x * amountOut) / (1 - this.fee) / (y - amountOut);\r\n    if (input < 1) input = 1\r\n    return [input, this.swapGasCost]\r\n  }\r\n\r\n  calcPrice(amountIn: number, direction: boolean, takeFeeIntoAccount: boolean): number {\r\n    const xBN = direction ? this.reserve0 : this.reserve1;\r\n    const yBN = direction ? this.reserve1 : this.reserve0;\r\n    const x = parseInt(xBN.toString());\r\n    const y = parseInt(yBN.toString());\r\n    const oneMinusFee = takeFeeIntoAccount ? 1 - this.fee : 1;\r\n    const xf = x / oneMinusFee;\r\n    return (y * xf) / (xf + amountIn) / (xf + amountIn);\r\n  }\r\n\r\n  calcInputByPrice(price: number, direction: boolean, takeFeeIntoAccount: boolean): number {\r\n    const xBN = direction ? this.reserve0 : this.reserve1;\r\n    const yBN = direction ? this.reserve1 : this.reserve0;\r\n    const x = parseInt(xBN.toString());\r\n    const y = parseInt(yBN.toString());\r\n    const oneMinusFee = takeFeeIntoAccount ? 1 - this.fee : 1;\r\n    const xf = x / oneMinusFee;\r\n    return Math.sqrt(y*xf*price) - xf;\r\n  }\r\n}\r\n\r\nexport class HybridRPool extends RPool {\r\n  readonly A: number\r\n  readonly A_PRECISION = 100\r\n  D: BigNumber  // set it to 0 if reserves are changed !!\r\n\r\n  constructor(\r\n    address: string,\r\n    token0: RToken,\r\n    token1: RToken,\r\n    fee: number,\r\n    A: number,\r\n    reserve0: BigNumber,\r\n    reserve1: BigNumber,\r\n  ) {\r\n      super(\r\n        address,\r\n        token0,\r\n        token1,\r\n        fee,\r\n        reserve0,\r\n        reserve1,\r\n      );\r\n      this.A = A\r\n      this.D = BigNumber.from(0)\r\n  }\r\n\r\n  computeLiquidity(): BigNumber {\r\n    if (!this.D.eq(0)) return this.D  // already calculated\r\n  \r\n    const r0 = this.reserve0\r\n    const r1 = this.reserve1\r\n  \r\n    if (r0.isZero() && r1.isZero()) return BigNumber.from(0)\r\n\r\n    const s = r0.add(r1)\r\n    const nA = BigNumber.from(this.A * 2)\r\n    let prevD\r\n    let D = s\r\n    for (let i = 0; i < 256; i++) {\r\n      const dP = D.mul(D).div(r0).mul(D).div(r1).div(4)\r\n      prevD = D\r\n      D = nA\r\n        .mul(s)\r\n        .div(this.A_PRECISION)\r\n        .add(dP.mul(2))\r\n        .mul(D)\r\n        .div(nA.div(this.A_PRECISION).sub(1).mul(D).add(dP.mul(3)))\r\n      if (D.sub(prevD).abs().lte(1)) {\r\n        break\r\n      }\r\n    }\r\n    this.D = D\r\n    return D\r\n  }\r\n\r\n  computeY(x: BigNumber): BigNumber {\r\n    const D = this.computeLiquidity();\r\n  \r\n    const nA = this.A * 2;\r\n  \r\n    let c = D.mul(D)\r\n      .div(x.mul(2))\r\n      .mul(D)\r\n      .div((nA * 2) / this.A_PRECISION);\r\n    let b = D.mul(this.A_PRECISION).div(nA).add(x);\r\n  \r\n    let yPrev;\r\n    let y = D;\r\n    for (let i = 0; i < 256; i++) {\r\n      yPrev = y;\r\n  \r\n      y = y.mul(y).add(c).div(y.mul(2).add(b).sub(D));\r\n      if (y.sub(yPrev).abs().lte(1)) {\r\n        break;\r\n      }\r\n    }\r\n    return y;\r\n  }\r\n\r\n  calcOutByIn(amountIn: number, direction: boolean): [number, number] {\r\n    const xBN = direction ? this.reserve0 : this.reserve1\r\n    const yBN = direction ? this.reserve1 : this.reserve0\r\n    const xNewBN = xBN.add(\r\n      getBigNumber(amountIn * (1 - this.fee))\r\n    )\r\n    const yNewBN = this.computeY(xNewBN)\r\n    const dy = parseInt(yBN.sub(yNewBN).toString())\r\n\r\n    return [dy, this.swapGasCost]\r\n  }\r\n\r\n  calcInByOut(amountOut: number, direction: boolean): [number, number] {\r\n    const xBN = direction ? this.reserve0 : this.reserve1\r\n    const yBN = direction ? this.reserve1 : this.reserve0\r\n    let yNewBN = yBN.sub(getBigNumber(amountOut))\r\n    if (yNewBN.lt(1))\r\n      // lack of precision\r\n      yNewBN = BigNumber.from(1)\r\n\r\n    const xNewBN = this.computeY(yNewBN)\r\n    let input = Math.round(parseInt(xNewBN.sub(xBN).toString()) / (1 - this.fee))\r\n\r\n    if (input < 1) input = 1\r\n    return [input, this.swapGasCost]\r\n  }\r\n\r\n  calcPrice(amountIn: number, direction: boolean, takeFeeIntoAccount: boolean): number {\r\n    const xBN = direction ? this.reserve0 : this.reserve1;\r\n    const x = parseInt(xBN.toString());\r\n    const oneMinusFee = takeFeeIntoAccount ? 1 - this.fee : 1;\r\n    const D = parseInt(this.computeLiquidity().toString());\r\n    const A = this.A / this.A_PRECISION;\r\n    const xI = x + amountIn;\r\n    const b = 4 * A * xI + D - 4 * A * D;\r\n    const ac4 = (D * D * D) / xI;\r\n    const Ds = Math.sqrt(b * b + 4 * A * ac4);\r\n    const res = (0.5 - (2 * b - ac4 / xI) / Ds / 4) * oneMinusFee;\r\n    return res;\r\n  }\r\n\r\n  calcInputByPrice(price: number, direction: boolean, takeFeeIntoAccount: boolean, hint = 1): number {\r\n      // TODO:  (x:number) => this.calcPrice(x, !direction, takeFeeIntoAccount)  ???\r\n      return revertPositive( (x:number) => 1/this.calcPrice(x, direction, takeFeeIntoAccount), price, hint);\r\n  }\r\n}\r\n","import {\r\n  ASSERT,\r\n  closeValues,\r\n} from \"./Utils\";\r\n\r\nimport { BigNumber } from \"@ethersproject/bignumber\";\r\nimport { RPool, RToken } from \"./PrimaryPools\";\r\n\r\nexport class Edge {\r\n  pool: RPool;\r\n  vert0: Vertice;\r\n  vert1: Vertice;\r\n\r\n  canBeUsed: boolean;\r\n  direction: boolean;\r\n  amountInPrevious: number;   // How many liquidity were passed from vert0 to vert1\r\n  amountOutPrevious: number;  // How many liquidity were passed from vert0 to vert1\r\n  spentGas: number            // How much gas was spent for this edge\r\n  spentGasNew: number         //  How much gas was will be spent for this edge\r\n  bestEdgeIncome: number;     // debug data\r\n\r\n\r\n  constructor(p: RPool, v0: Vertice, v1: Vertice) {\r\n    this.pool = p;\r\n    this.vert0 = v0;\r\n    this.vert1 = v1;\r\n    this.amountInPrevious = 0;\r\n    this.amountOutPrevious = 0;\r\n    this.canBeUsed = true;\r\n    this.direction = true;\r\n    this.spentGas = 0;\r\n    this.spentGasNew = 0;\r\n    this.bestEdgeIncome = 0;\r\n  }\r\n\r\n  reserve(v: Vertice): BigNumber {\r\n    return v === this.vert0 ? this.pool.reserve0 : this.pool.reserve1\r\n  }\r\n\r\n  calcOutput(v: Vertice, amountIn: number) {\r\n    let out, gas;\r\n    if (v === this.vert1) {\r\n      if (this.direction) {\r\n        if (amountIn < this.amountOutPrevious) {\r\n          [out, gas] = this.pool.calcInByOut(this.amountOutPrevious - amountIn, true)\r\n          out = this.amountInPrevious - out\r\n        } else {\r\n          [out, gas] = this.pool.calcOutByIn(amountIn - this.amountOutPrevious, false)\r\n          out = out + this.amountInPrevious;\r\n        }\r\n      } else {\r\n        [out, gas] = this.pool.calcOutByIn(this.amountOutPrevious + amountIn, false)\r\n        out = out - this.amountInPrevious;\r\n      }\r\n    } else {\r\n      if (this.direction) {\r\n        [out, gas] = this.pool.calcOutByIn(this.amountInPrevious + amountIn, true)\r\n        out = out - this.amountOutPrevious;\r\n      } else {\r\n        if (amountIn < this.amountInPrevious) {\r\n          [out, gas] = this.pool.calcInByOut(this.amountInPrevious - amountIn, false)\r\n          out = this.amountOutPrevious - out\r\n        } else {\r\n          [out, gas] = this.pool.calcOutByIn(amountIn - this.amountInPrevious, true)\r\n          out = out + this.amountOutPrevious;\r\n        }\r\n      }\r\n    }\r\n\r\n    // this.testApply(v, amountIn, out);\r\n\r\n    return [out, gas - this.spentGas];\r\n  }\r\n\r\n  checkMinimalLiquidityExceededAfterSwap(from: Vertice, amountOut: number): boolean {\r\n    if (from === this.vert0) {\r\n      const r1 = parseInt(this.pool.reserve1.toString())\r\n      if (this.direction) {\r\n        return r1 - amountOut - this.amountOutPrevious < this.pool.minLiquidity;\r\n      } else {\r\n        return r1 - amountOut + this.amountOutPrevious < this.pool.minLiquidity;\r\n      }\r\n    } else {\r\n      const r0 = parseInt(this.pool.reserve0.toString())\r\n      if (this.direction) {\r\n        return r0 - amountOut + this.amountInPrevious < this.pool.minLiquidity;\r\n      } else {\r\n        return r0 - amountOut - this.amountInPrevious < this.pool.minLiquidity;\r\n      }\r\n    }\r\n  }\r\n\r\n  // doesn't used in production - just for testing\r\n  testApply(from: Vertice, amountIn: number, amountOut: number) {\r\n    console.assert(this.amountInPrevious * this.amountOutPrevious >= 0)\r\n    const inPrev = this.direction ? this.amountInPrevious : -this.amountInPrevious\r\n    const outPrev = this.direction ? this.amountOutPrevious : -this.amountOutPrevious\r\n    const to = from.getNeibour(this)\r\n    let directionNew,\r\n      amountInNew = 0,\r\n      amountOutNew = 0\r\n    if (to) {\r\n      const inInc = from === this.vert0 ? amountIn : -amountOut\r\n      const outInc = from === this.vert0 ? amountOut : -amountIn\r\n      const inNew = inPrev + inInc\r\n      const outNew = outPrev + outInc\r\n      if (inNew * outNew < 0) console.log('333')\r\n      console.assert(inNew * outNew >= 0)\r\n      if (inNew >= 0) {\r\n        directionNew = true\r\n        amountInNew = inNew\r\n        amountOutNew = outNew\r\n      } else {\r\n        directionNew = false\r\n        amountInNew = -inNew\r\n        amountOutNew = -outNew\r\n      }\r\n    } else console.error('Error 221')\r\n\r\n    if (directionNew) {\r\n      const calc = this.pool.calcOutByIn(amountInNew, true)[0];\r\n      const res = closeValues(amountOutNew, calc, 1e-6);\r\n      if (!res)\r\n        console.log(\r\n          \"Err 225-1 !!\",\r\n          amountOutNew,\r\n          calc,\r\n          Math.abs(calc / amountOutNew - 1)\r\n        );\r\n      return res;\r\n    } else {\r\n      const calc = this.pool.calcOutByIn(amountOutNew, false)[0];\r\n      const res = closeValues(amountInNew, calc, 1e-6);\r\n      if (!res)\r\n        console.log(\r\n          \"Err 225-2!!\",\r\n          amountInNew,\r\n          calc,\r\n          Math.abs(calc / amountInNew - 1)\r\n        );\r\n      return res;\r\n    }\r\n  }\r\n\r\n  applySwap(from: Vertice) {\r\n    console.assert(this.amountInPrevious * this.amountOutPrevious >= 0)\r\n    const inPrev = this.direction ? this.amountInPrevious : -this.amountInPrevious\r\n    const outPrev = this.direction ? this.amountOutPrevious : -this.amountOutPrevious\r\n    const to = from.getNeibour(this)\r\n    if (to) {\r\n      const inInc = from === this.vert0 ? from.bestIncome : -to.bestIncome\r\n      const outInc = from === this.vert0 ? to.bestIncome : -from.bestIncome\r\n      const inNew = inPrev + inInc\r\n      const outNew = outPrev + outInc\r\n      console.assert(inNew * outNew >= 0)\r\n      if (inNew >= 0) {\r\n        this.direction = true\r\n        this.amountInPrevious = inNew\r\n        this.amountOutPrevious = outNew\r\n      } else {\r\n        this.direction = false\r\n        this.amountInPrevious = -inNew\r\n        this.amountOutPrevious = -outNew\r\n      }\r\n    } else console.error(\"Error 221\");\r\n    this.spentGas = this.spentGasNew\r\n\r\n    ASSERT(() => {\r\n      if (this.direction)\r\n        return closeValues(\r\n          this.amountOutPrevious,\r\n          this.pool.calcOutByIn(this.amountInPrevious, this.direction)[0],\r\n          1e-6\r\n        );\r\n      else {\r\n        return closeValues(\r\n          this.amountInPrevious,\r\n          this.pool.calcOutByIn(this.amountOutPrevious, this.direction)[0],\r\n          1e-6\r\n        );\r\n      }\r\n    }, `Error 225`)\r\n  }\r\n}\r\n\r\nexport class Vertice {\r\n  token: RToken\r\n  edges: Edge[]\r\n\r\n  price: number\r\n  gasPrice: number\r\n\r\n  bestIncome: number // temp data used for findBestPath algorithm\r\n  gasSpent: number // temp data used for findBestPath algorithm\r\n  bestTotal: number // temp data used for findBestPath algorithm\r\n  bestSource?: Edge // temp data used for findBestPath algorithm\r\n  checkLine: number // debug data\r\n\r\n  constructor(t: RToken) {\r\n    this.token = t\r\n    this.edges = []\r\n    this.price = 0\r\n    this.gasPrice = 0\r\n    this.bestIncome = 0\r\n    this.gasSpent = 0\r\n    this.bestTotal = 0\r\n    this.bestSource = undefined\r\n    this.checkLine = -1\r\n  }\r\n\r\n  getNeibour(e?: Edge) {\r\n    if (!e) return\r\n    return e.vert0 === this ? e.vert1 : e.vert0\r\n  }\r\n}\r\n\r\nexport class Graph {\r\n  vertices: Vertice[]\r\n  edges: Edge[]\r\n  tokens: Map<string, Vertice>\r\n\r\n  constructor(pools: RPool[], baseToken: RToken, gasPrice: number) {\r\n    this.vertices = [];\r\n    this.edges = [];\r\n    this.tokens = new Map();\r\n    pools.forEach((p) => {\r\n      const v0 = this.getOrCreateVertice(p.token0)\r\n      const v1 = this.getOrCreateVertice(p.token1)\r\n      const edge = new Edge(p, v0, v1)\r\n      v0.edges.push(edge)\r\n      v1.edges.push(edge)\r\n      this.edges.push(edge)\r\n    })\r\n    const baseVert = this.tokens.get(baseToken.address)\r\n    if (baseVert) {\r\n      this.setPrices(baseVert, 1, gasPrice)\r\n    }\r\n  }\r\n\r\n  setPrices(from: Vertice, price: number, gasPrice: number) {\r\n    if (from.price !== 0) return\r\n    from.price = price\r\n    from.gasPrice = gasPrice\r\n    const edges = from.edges\r\n      .map((e): [Edge, number] => [e, parseInt(e.reserve(from).toString())])\r\n      .sort(([_1, r1], [_2, r2]) => r2 - r1)\r\n    edges.forEach(([e, _]) => {\r\n      const v = e.vert0 === from ? e.vert1 : e.vert0;\r\n      if (v.price !== 0) return;\r\n      let p = e.pool.calcPrice(0, from === e.vert1, false);\r\n      this.setPrices(v, price * p, gasPrice / p);\r\n    });\r\n  }\r\n\r\n  getOrCreateVertice(token: RToken) {\r\n    let vert = this.tokens.get(token.address)\r\n    if (vert) return vert\r\n    vert = new Vertice(token)\r\n    this.vertices.push(vert)\r\n    this.tokens.set(token.address, vert)\r\n    return vert\r\n  }\r\n\r\n  /*exportPath(from: RToken, to: RToken) {\r\n\r\n    const fromVert = this.tokens.get(from) as Vertice\r\n    const toVert = this.tokens.get(to) as Vertice\r\n    const initValue = (fromVert.bestIncome * fromVert.price) / toVert.price\r\n\r\n    const route = new Set<Edge>()\r\n    for (let v = toVert; v !== fromVert; v = v.getNeibour(v.bestSource) as Vertice) {\r\n      if (v.bestSource) route.add(v.bestSource)\r\n    }\r\n\r\n    function edgeStyle(e: Edge) {\r\n      const finish = e.vert1.bestSource === e\r\n      const start = e.vert0.bestSource === e\r\n      let label\r\n      if (e.bestEdgeIncome === -1) label = 'label: \"low_liq\"'\r\n      if (e.bestEdgeIncome !== 0) label = `label: \"${print((e.bestEdgeIncome / initValue - 1) * 100, 3)}%\"`\r\n      const edgeValue = route.has(e) ? 'value: 2' : undefined\r\n      let arrow\r\n      if (finish && start) arrow = 'arrows: \"from,to\"'\r\n      if (finish) arrow = 'arrows: \"to\"'\r\n      if (start) arrow = 'arrows: \"from\"'\r\n      return ['', label, edgeValue, arrow].filter((a) => a !== undefined).join(', ')\r\n    }\r\n\r\n    function print(n: number, digits: number) {\r\n      let out\r\n      if (n === 0) out = '0'\r\n      else {\r\n        const n0 = n > 0 ? n : -n\r\n        const shift = digits - Math.ceil(Math.log(n0) / Math.LN10)\r\n        if (shift <= 0) out = `${Math.round(n0)}`\r\n        else {\r\n          const mult = Math.pow(10, shift)\r\n          out = `${Math.round(n0 * mult) / mult}`\r\n        }\r\n        if (n < 0) out = -out\r\n      }\r\n      return out\r\n    }\r\n\r\n    function nodeLabel(v: Vertice) {\r\n      const value = (v.bestIncome * v.price) / toVert.price\r\n      const income = `${print(value, 3)}`\r\n      const total = `${print(v.bestTotal, 3)}`\r\n      // const income = `${print((value/initValue-1)*100, 3)}%`\r\n      // const total = `${print((v.bestTotal/initValue-1)*100, 3)}%`\r\n      const checkLine = v.checkLine === -1 ? undefined : `${v.checkLine}`\r\n      return [checkLine, income, total].filter((a) => a !== undefined).join(':')\r\n    }\r\n\r\n    const nodes = `var nodes = new vis.DataSet([\r\n      ${this.vertices.map((t) => `{ id: ${t.token.name}, label: \"${nodeLabel(t)}\"}`).join(',\\n\\t\\t')}\r\n    ]);\\n`\r\n    const edges = `var edges = new vis.DataSet([\r\n      ${this.edges\r\n        .map((p) => `{ from: ${p.vert0.token.name}, to: ${p.vert1.token.name}${edgeStyle(p)}}`)\r\n        .join(',\\n\\t\\t')}\r\n    ]);\\n`\r\n    const data = `var data = {\r\n        nodes: nodes,\r\n        edges: edges,\r\n    };\\n`\r\n\r\n    // TODO: This should be removed, this pacakge will not be installable on a client while this remains.\r\n    const fs = require(\"fs\");\r\n    fs.writeFileSync(\r\n      \"D:/Info/Notes/GraphVisualization/data.js\",\r\n      nodes + edges + data\r\n    );\r\n  }*/\r\n\r\n  findBestPath(\r\n    from: RToken,\r\n    to: RToken,\r\n    amountIn: number\r\n  ):\r\n    | {\r\n        path: Edge[]\r\n        output: number\r\n        gasSpent: number\r\n        totalOutput: number\r\n      }\r\n    | undefined {\r\n    const start = this.tokens.get(from.address)\r\n    const finish = this.tokens.get(to.address)\r\n    if (!start || !finish) return\r\n\r\n    this.edges.forEach((e) => {\r\n      e.bestEdgeIncome = 0\r\n      e.spentGasNew = 0\r\n    });\r\n    this.vertices.forEach((v) => {\r\n      v.bestIncome = 0\r\n      v.gasSpent = 0\r\n      v.bestTotal = 0\r\n      v.bestSource = undefined\r\n      v.checkLine = -1\r\n    })\r\n    start.bestIncome = amountIn\r\n    start.bestTotal = amountIn\r\n    const processedVert = new Set<Vertice>()\r\n    const nextVertList = [start] // TODO: Use sorted Set!\r\n\r\n    let checkLine = 0\r\n    for (;;) {\r\n      let closestVert: Vertice | undefined\r\n      let closestTotal = -1\r\n      let closestPosition = 0\r\n      nextVertList.forEach((v, i) => {\r\n        if (v.bestTotal > closestTotal) {\r\n          closestTotal = v.bestTotal\r\n          closestVert = v\r\n          closestPosition = i\r\n        }\r\n      })\r\n\r\n      if (!closestVert) return\r\n\r\n      closestVert.checkLine = checkLine++\r\n\r\n      if (closestVert === finish) {\r\n        const bestPath = []\r\n        for (let v: Vertice | undefined = finish; v?.bestSource; v = v.getNeibour(v.bestSource)) {\r\n          bestPath.unshift(v.bestSource)\r\n        }\r\n        return {\r\n          path: bestPath,\r\n          output: finish.bestIncome,\r\n          gasSpent: finish.gasSpent,\r\n          totalOutput: finish.bestTotal,\r\n        }\r\n      }\r\n      nextVertList.splice(closestPosition, 1)\r\n\r\n      closestVert.edges.forEach((e) => {\r\n        const v2 = closestVert === e.vert0 ? e.vert1 : e.vert0\r\n        if (processedVert.has(v2)) return\r\n        let newIncome, gas\r\n        try {\r\n          ;[newIncome, gas] = e.calcOutput(closestVert as Vertice, (closestVert as Vertice).bestIncome)\r\n        } catch (e) {\r\n          // Any arithmetic error or out-of-liquidity\r\n          return\r\n        }\r\n        if (e.checkMinimalLiquidityExceededAfterSwap(closestVert as Vertice, newIncome)) {\r\n          e.bestEdgeIncome = -1\r\n          return\r\n        }\r\n        const newGasSpent = (closestVert as Vertice).gasSpent + gas\r\n        const price = v2.price / finish.price\r\n        const newTotal = newIncome * price - newGasSpent * finish.gasPrice\r\n\r\n        console.assert(e.bestEdgeIncome === 0, \"Error 373\");\r\n        e.bestEdgeIncome = newIncome * price;\r\n        e.spentGasNew = e.spentGas + gas;\r\n\r\n        if (!v2.bestSource) nextVertList.push(v2)\r\n        if (!v2.bestSource || newTotal > v2.bestTotal) {\r\n          v2.bestIncome = newIncome\r\n          v2.gasSpent = newGasSpent\r\n          v2.bestTotal = newTotal\r\n          v2.bestSource = e\r\n        }\r\n      })\r\n      processedVert.add(closestVert)\r\n    }\r\n  }\r\n\r\n  addPath(from: Vertice | undefined, to: Vertice | undefined, path: Edge[]) {\r\n    let _from = from\r\n    path.forEach((e) => {\r\n      if (_from) {\r\n        e.applySwap(_from)\r\n        _from = _from.getNeibour(e)\r\n      } else {\r\n        console.error('Unexpected 315')\r\n      }\r\n    })\r\n\r\n    ASSERT(() => {\r\n      const res = this.vertices.every((v) => {\r\n        let total = 0\r\n        let totalModule = 0\r\n        v.edges.forEach((e) => {\r\n          if (e.vert0 === v) {\r\n            if (e.direction) {\r\n              total -= e.amountInPrevious\r\n            } else {\r\n              total += e.amountInPrevious\r\n            }\r\n            totalModule += e.amountInPrevious\r\n          } else {\r\n            if (e.direction) {\r\n              total += e.amountOutPrevious\r\n            } else {\r\n              total -= e.amountOutPrevious\r\n            }\r\n            totalModule += e.amountOutPrevious\r\n          }\r\n        })\r\n        if (v === from) return total <= 0\r\n        if (v === to) return total >= 0\r\n        if (totalModule === 0) return total === 0\r\n        return Math.abs(total / totalModule) < 1e10\r\n      })\r\n      return res\r\n    }, 'Error 290')\r\n  }\r\n\r\n  findBestRoute(from: RToken, to: RToken, amountIn: number, mode: number | number[]): MultiRoute {\r\n    let routeValues = []\r\n    if (Array.isArray(mode)) {\r\n      const sum = mode.reduce((a, b) => a + b, 0)\r\n      routeValues = mode.map((e) => e / sum)\r\n    } else {\r\n      for (let i = 0; i < mode; ++i) routeValues.push(1 / mode)\r\n    }\r\n\r\n    this.edges.forEach((e) => {\r\n      e.amountInPrevious = 0\r\n      e.amountOutPrevious = 0\r\n      e.direction = true\r\n    })\r\n    let output = 0\r\n    let gasSpentInit = 0\r\n    //let totalOutput = 0\r\n    let totalrouted = 0\r\n    let step\r\n    for (step = 0; step < routeValues.length; ++step) {\r\n      const p = this.findBestPath(from, to, amountIn * routeValues[step])\r\n      if (!p) {\r\n        break\r\n      } else {\r\n        output += p.output\r\n        gasSpentInit += p.gasSpent\r\n        //totalOutput += p.totalOutput\r\n        this.addPath(this.tokens.get(from.address), this.tokens.get(to.address), p.path)\r\n        totalrouted += routeValues[step]\r\n      }\r\n    }\r\n    if (step == 0)\r\n      return {\r\n        status: RouteStatus.NoWay,\r\n        fromToken: from,\r\n        toToken: to,\r\n        amountIn: 0,\r\n        amountOut: 0,\r\n        legs: [],\r\n        gasSpent: 0,\r\n        totalAmountOut: 0,\r\n      }\r\n    let status\r\n    if (step < routeValues.length) status = RouteStatus.Partial\r\n    else status = RouteStatus.Success\r\n\r\n    const fromVert = this.tokens.get(from.address) as Vertice\r\n    const toVert = this.tokens.get(to.address) as Vertice\r\n    const [legs, gasSpent, topologyWasChanged] = this.getRouteLegs(fromVert, toVert)\r\n    console.assert(gasSpent <= gasSpentInit, 'Internal Error 491')\r\n\r\n    if (topologyWasChanged) {\r\n      output = this.calcLegsAmountOut(legs, amountIn, to)\r\n    }\r\n\r\n    return {\r\n      status,\r\n      fromToken: from,\r\n      toToken: to,\r\n      amountIn: amountIn * totalrouted,\r\n      amountOut: output,\r\n      legs,\r\n      gasSpent,\r\n      totalAmountOut: output - gasSpent * toVert.gasPrice,\r\n    }\r\n  }\r\n\r\n  getRouteLegs(from: Vertice, to: Vertice): [RouteLeg[], number, boolean] {\r\n    const [nodes, topologyWasChanged] = this.cleanTopology(from, to)\r\n    const legs: RouteLeg[] = []\r\n    let gasSpent = 0\r\n    nodes.forEach((n) => {\r\n      const outEdges = this.getOutputEdges(n).map((e) => {\r\n        const from = this.edgeFrom(e)\r\n        return from ? [e, from[0], from[1]] : [e]\r\n      })\r\n\r\n      let outAmount = outEdges.reduce((a, b) => a + (b[2] as number), 0)\r\n      if (outAmount <= 0) return\r\n\r\n      const total = outAmount\r\n      outEdges.forEach((e, i) => {\r\n        const p = e[2] as number\r\n        const quantity = i + 1 === outEdges.length ? 1 : p / outAmount\r\n        legs.push({\r\n          address: (e[0] as Edge).pool.address,\r\n          token: n.token,\r\n          swapPortion: quantity,\r\n          absolutePortion: p / total,\r\n        })\r\n        gasSpent += (e[0] as Edge).pool.swapGasCost\r\n        outAmount -= p\r\n      })\r\n      console.assert(outAmount / total < 1e-12, 'Error 281')\r\n    })\r\n    return [legs, gasSpent, topologyWasChanged]\r\n  }\r\n\r\n  edgeFrom(e: Edge): [Vertice, number] | undefined {\r\n    if (e.amountInPrevious === 0) return undefined\r\n    return e.direction ? [e.vert0, e.amountInPrevious] : [e.vert1, e.amountOutPrevious]\r\n  }\r\n\r\n  getOutputEdges(v: Vertice): Edge[] {\r\n    return v.edges.filter((e) => {\r\n      if (!e.canBeUsed) return false\r\n      if (e.amountInPrevious === 0) return false\r\n      if (e.direction !== (e.vert0 === v)) return false\r\n      return true\r\n    })\r\n  }\r\n\r\n  getInputEdges(v: Vertice): Edge[] {\r\n    return v.edges.filter((e) => {\r\n      if (!e.canBeUsed) return false\r\n      if (e.amountInPrevious === 0) return false\r\n      if (e.direction === (e.vert0 === v)) return false\r\n      return true\r\n    })\r\n  }\r\n\r\n  calcLegsAmountOut(legs: RouteLeg[], amountIn: number, to: RToken) {\r\n    const amounts = new Map<string, number>()\r\n    amounts.set(legs[0].token.address, amountIn)\r\n    legs.forEach((l) => {\r\n      const vert = this.tokens.get(l.token.address);\r\n      console.assert(vert !== undefined, \"Internal Error 570\");\r\n      const edge = (vert as Vertice).edges.find(\r\n        (e) => e.pool.address === l.address\r\n      );\r\n      console.assert(edge !== undefined, \"Internel Error 569\");\r\n      const pool = (edge as Edge).pool;\r\n      const direction = vert === (edge as Edge).vert0;\r\n\r\n      const inputTotal = amounts.get(l.token.address);\r\n      console.assert(inputTotal !== undefined, \"Internal Error 564\");\r\n      const input = (inputTotal as number) * l.swapPortion;\r\n      amounts.set(l.token.address, (inputTotal as number) - input);\r\n      const output = pool.calcOutByIn(input, direction)[0];\r\n\r\n      const vertNext = (vert as Vertice).getNeibour(edge) as Vertice;\r\n      const prevAmount = amounts.get(vertNext.token.address);\r\n      amounts.set(vertNext.token.address, (prevAmount || 0) + output);\r\n    });\r\n    return amounts.get(to.address) || 0;\r\n  }\r\n\r\n  // removes all cycles if there are any, then removes all dead end could appear after cycle removing\r\n  // Returns clean result topologically sorted\r\n  cleanTopology(from: Vertice, to: Vertice): [Vertice[], boolean] {\r\n    let topologyWasChanged = false\r\n    let result = this.topologySort(from, to)\r\n    if (result[0] !== 2) {\r\n      topologyWasChanged = true\r\n      console.assert(result[0] === 0, 'Internal Error 554')\r\n      while (result[0] === 0) {\r\n        this.removeWeakestEdge(result[1])\r\n        result = this.topologySort(from, to)\r\n      }\r\n      if (result[0] === 3) {\r\n        this.removeDeadEnds(result[1])\r\n        result = this.topologySort(from, to)\r\n      }\r\n      console.assert(result[0] === 2, 'Internal Error 563')\r\n      if (result[0] !== 2) return [[], topologyWasChanged]\r\n    }\r\n    return [result[1], topologyWasChanged]\r\n  }\r\n\r\n  removeDeadEnds(verts: Vertice[]) {\r\n    verts.forEach((v) => {\r\n      this.getInputEdges(v).forEach((e) => {\r\n        e.canBeUsed = false\r\n      })\r\n    })\r\n  }\r\n\r\n  removeWeakestEdge(verts: Vertice[]) {\r\n    let minVert: Vertice, minVertNext: Vertice\r\n    let minOutput = Number.MAX_VALUE\r\n    verts.forEach((v1, i) => {\r\n      const v2 = i === 0 ? verts[verts.length - 1] : verts[i - 1]\r\n      let out = 0\r\n      this.getOutputEdges(v1).forEach((e) => {\r\n        if (v1.getNeibour(e) !== v2) return\r\n        out += e.direction ? e.amountOutPrevious : e.amountInPrevious\r\n      })\r\n      if (out < minOutput) {\r\n        minVert = v1\r\n        minVertNext = v2\r\n        minOutput = out\r\n      }\r\n    })\r\n    // @ts-ignore\r\n    this.getOutputEdges(minVert).forEach((e) => {\r\n      if (minVert.getNeibour(e) !== minVertNext) return\r\n      e.canBeUsed = false\r\n    })\r\n  }\r\n\r\n  // topological sort\r\n  // if there is a cycle - returns [0, <List of envolved vertices in the cycle>]\r\n  // if there are no cycles but deadends- returns [3, <List of all envolved deadend vertices>]\r\n  // if there are no cycles or deadends- returns [2, <List of all envolved vertices topologically sorted>]\r\n  topologySort(from: Vertice, to: Vertice): [number, Vertice[]] {\r\n    // undefined or 0 - not processed, 1 - in process, 2 - finished, 3 - dedend\r\n    const vertState = new Map<Vertice, number>()\r\n    const vertsFinished: Vertice[] = []\r\n    const foundCycle: Vertice[] = []\r\n    const foundDeadEndVerts: Vertice[] = []\r\n\r\n    const that = this\r\n    // 0 - cycle was found and created, return\r\n    // 1 - during cycle creating\r\n    // 2 - vertex is processed ok\r\n    // 3 - dead end vertex\r\n    function topSortRecursive(current: Vertice): number {\r\n      const state = vertState.get(current)\r\n      if (state === 2 || state === 3) return state\r\n      if (state === 1) {\r\n        console.assert(foundCycle.length == 0, 'Internal Error 566')\r\n        foundCycle.push(current)\r\n        return 1\r\n      }\r\n      vertState.set(current, 1)\r\n\r\n      let successors2Exist = false\r\n      const outEdges = that.getOutputEdges(current)\r\n      for (let i = 0; i < outEdges.length; ++i) {\r\n        const e = outEdges[i]\r\n        const res = topSortRecursive(current.getNeibour(e) as Vertice)\r\n        if (res === 0) return 0\r\n        if (res === 1) {\r\n          if (foundCycle[0] === current) return 0\r\n          else {\r\n            foundCycle.push(current)\r\n            return 1\r\n          }\r\n        }\r\n        if (res === 2) successors2Exist = true // Ok successors\r\n      }\r\n      if (successors2Exist) {\r\n        console.assert(current !== to, 'Internal Error 589')\r\n        vertsFinished.push(current)\r\n        vertState.set(current, 2)\r\n        return 2\r\n      } else {\r\n        if (current !== to) {\r\n          foundDeadEndVerts.push(current)\r\n          vertState.set(current, 3)\r\n          return 3\r\n        }\r\n        vertsFinished.push(current)\r\n        vertState.set(current, 2)\r\n        return 2\r\n      }\r\n    }\r\n\r\n    const res = topSortRecursive(from)\r\n    if (res === 0) return [0, foundCycle]\r\n    if (foundDeadEndVerts.length) return [3, foundDeadEndVerts]\r\n    ASSERT(() => {\r\n      if (vertsFinished[0] !== to) return false\r\n      if (vertsFinished[vertsFinished.length - 1] !== from) return false\r\n      return true\r\n    }, 'Internal Error 614')\r\n    if (res === 2) return [2, vertsFinished.reverse()]\r\n    console.assert(true, 'Internal Error 612')\r\n    return [1, []]\r\n  }\r\n}\r\n\r\n\r\nexport interface RouteLeg {\r\n  address: string;\r\n  token: RToken;\r\n  swapPortion: number; // For router contract\r\n  absolutePortion: number; // To depict at webpage for user\r\n}\r\n\r\nexport enum RouteStatus {\r\n  Success = \"Success\",\r\n  NoWay = \"NoWay\",\r\n  Partial = \"Partial\",\r\n}\r\nexport interface MultiRoute {\r\n  status: RouteStatus;\r\n  fromToken: RToken;\r\n  toToken: RToken;\r\n  amountIn: number;\r\n  amountOut: number;\r\n  legs: RouteLeg[];\r\n  gasSpent: number;\r\n  totalAmountOut: number;\r\n}\r\n\r\nexport function findMultiRouting(\r\n  from: RToken,\r\n  to: RToken,\r\n  amountIn: number,\r\n  pools: RPool[],\r\n  baseToken: RToken,\r\n  gasPrice: number,\r\n  steps: number | number[] = 12\r\n): MultiRoute {\r\n  const g = new Graph(pools, baseToken, gasPrice)\r\n  const fromV = g.tokens.get(from.address)\r\n  if (fromV?.price === 0) {\r\n    g.setPrices(fromV, 1, 0)\r\n  }\r\n  const out = g.findBestRoute(from, to, amountIn, steps)\r\n  return out\r\n}\r\n","import { BigNumber } from '@ethersproject/bignumber'\r\n\r\ninterface RToken {\r\n  name: string\r\n  address: string\r\n}\r\n\r\nexport enum PoolType {\r\n  ConstantProduct = 'ConstantProduct',\r\n  Weighted = 'Weighted',\r\n  Hybrid = 'Hybrid',\r\n  ConcentratedLiquidity = 'ConcentratedLiquidity',\r\n}\r\n\r\nexport interface PoolInfo {\r\n  address: string\r\n  token0: RToken\r\n  token1: RToken\r\n  type: PoolType\r\n  reserve0: BigNumber\r\n  reserve1: BigNumber\r\n  fee: number\r\n  minLiquidity: number\r\n  swapGasCost: number\r\n}\r\n\r\ntype Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>\r\ntype PartialBy<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>\r\ntype PoolInfoWithDefaults = PartialBy<PoolInfo, 'minLiquidity' | 'swapGasCost'>\r\n\r\nexport class Pool {\r\n  address: string\r\n  token0: RToken\r\n  token1: RToken\r\n  type: PoolType\r\n  reserve0: BigNumber\r\n  reserve1: BigNumber\r\n  fee: number\r\n  minLiquidity: number\r\n  swapGasCost: number\r\n\r\n  constructor(_info: PoolInfoWithDefaults) {\r\n    const info = {\r\n      minLiquidity: 1000,\r\n      swapGasCost: 40_000,\r\n      ..._info,\r\n    }\r\n    this.address = info.address\r\n    this.token0 = info.token0\r\n    this.token1 = info.token1\r\n    this.type = info.type\r\n    this.reserve0 = info.reserve0\r\n    this.reserve1 = info.reserve1\r\n    this.fee = info.fee\r\n    this.minLiquidity = info.minLiquidity\r\n    this.swapGasCost = info.swapGasCost\r\n  }\r\n}\r\n\r\ntype PoolInfoNoType = Omit<PoolInfoWithDefaults, 'type'>\r\n\r\nexport class RConstantProductPool extends Pool {\r\n  constructor(info: PoolInfoNoType) {\r\n    super({\r\n      type: PoolType.ConstantProduct,\r\n      ...info,\r\n    })\r\n  }\r\n}\r\n\r\ntype HybridPoolInfo = PoolInfoNoType & { A: number }\r\n\r\nexport class RHybridPool extends Pool {\r\n  A: number\r\n  constructor(info: HybridPoolInfo) {\r\n    super({\r\n      type: PoolType.Hybrid,\r\n      ...info,\r\n    })\r\n    this.A = info.A\r\n  }\r\n}\r\n\r\ntype WeightedPoolInfo = PoolInfoNoType & { weight0: number; weight1: number }\r\n\r\nexport class RWeightedPool extends Pool {\r\n  weight0: number\r\n  weight1: number\r\n  constructor(info: WeightedPoolInfo) {\r\n    super({\r\n      type: PoolType.Weighted,\r\n      ...info,\r\n    })\r\n    this.weight0 = info.weight0\r\n    this.weight1 = info.weight1\r\n  }\r\n}\r\n\r\nexport const CL_MIN_TICK = -887272\r\nexport const CL_MAX_TICK = -CL_MIN_TICK - 1\r\ninterface CLTick {\r\n  index: number\r\n  DLiquidity: number\r\n}\r\n\r\ninterface CLSpecific {\r\n  liquidity: number\r\n  sqrtPrice: number\r\n  nearestTick: number\r\n  ticks: CLTick[]\r\n}\r\n\r\ntype CLPoolInfo = Omit<PoolInfoNoType, 'reserve0' | 'reserve1'> & CLSpecific\r\n\r\nexport class RConcentratedLiquidityPool extends Pool {\r\n  liquidity: number\r\n  sqrtPrice: number\r\n  nearestTick: number\r\n  ticks: CLTick[]\r\n  constructor(info: CLPoolInfo) {\r\n    super({\r\n      type: PoolType.ConcentratedLiquidity,\r\n      reserve0: BigNumber.from(0),\r\n      reserve1: BigNumber.from(0),\r\n      ...info,\r\n    })\r\n    this.liquidity = info.liquidity\r\n    this.sqrtPrice = info.sqrtPrice\r\n    this.nearestTick = info.nearestTick\r\n    this.ticks = info.ticks\r\n  }\r\n}\r\n\r\n","import {\r\n  CL_MAX_TICK,\r\n  CL_MIN_TICK,\r\n  Pool,\r\n  PoolType,\r\n  RConcentratedLiquidityPool,\r\n  RHybridPool,\r\n  RWeightedPool,\r\n} from './MultiRouterTypes'\r\n\r\nimport { BigNumber } from \"@ethersproject/bignumber\";\r\nimport { getBigNumber, revertPositive } from \"../Utils\";\r\n\r\nconst A_PRECISION = 100\r\n\r\nconst DCacheBN = new Map<Pool, BigNumber>()\r\nexport function HybridComputeLiquidity(pool: RHybridPool): BigNumber {\r\n  const res = DCacheBN.get(pool)\r\n  if (res !== undefined) return res\r\n\r\n  const r0 = pool.reserve0\r\n  const r1 = pool.reserve1\r\n\r\n  if (r0.isZero() && r1.isZero()) {\r\n    DCacheBN.set(pool, BigNumber.from(0))\r\n    return BigNumber.from(0)\r\n  }\r\n  const s = r0.add(r1)\r\n\r\n  const nA = BigNumber.from(pool.A * 2)\r\n\r\n  let prevD\r\n\r\n  let D = s\r\n  for (let i = 0; i < 256; i++) {\r\n    const dP = D.mul(D).div(r0).mul(D).div(r1).div(4)\r\n    prevD = D\r\n    D = nA\r\n      .mul(s)\r\n      .div(A_PRECISION)\r\n      .add(dP.mul(2))\r\n      .mul(D)\r\n      .div(nA.div(A_PRECISION).sub(1).mul(D).add(dP.mul(3)))\r\n    if (D.sub(prevD).abs().lte(1)) {\r\n      break\r\n    }\r\n  }\r\n  DCacheBN.set(pool, D)\r\n  return D\r\n}\r\n\r\nexport function HybridgetY(pool: RHybridPool, x: BigNumber): BigNumber {\r\n  const D = HybridComputeLiquidity(pool)\r\n\r\n  const nA = pool.A * 2\r\n\r\n  let c = D.mul(D)\r\n    .div(x.mul(2))\r\n    .mul(D)\r\n    .div((nA * 2) / A_PRECISION)\r\n  let b = D.mul(A_PRECISION).div(nA).add(x)\r\n\r\n  let yPrev\r\n  let y = D\r\n  for (let i = 0; i < 256; i++) {\r\n    yPrev = y\r\n\r\n    y = y.mul(y).add(c).div(y.mul(2).add(b).sub(D))\r\n    if (y.sub(yPrev).abs().lte(1)) {\r\n      break\r\n    }\r\n  }\r\n  return y\r\n}\r\n\r\nexport function calcOutByIn(pool: Pool, amountIn: number, direction = true): number {\r\n  const xBN = direction ? pool.reserve0 : pool.reserve1\r\n  const yBN = direction ? pool.reserve1 : pool.reserve0\r\n  switch (pool.type) {\r\n    case PoolType.ConstantProduct: {\r\n      const x = parseInt(xBN.toString())\r\n      const y = parseInt(yBN.toString())\r\n      return (y * amountIn) / (x / (1 - pool.fee) + amountIn)\r\n    }\r\n    case PoolType.Weighted: {\r\n      const x = parseInt(xBN.toString())\r\n      const y = parseInt(yBN.toString())\r\n      const wPool = pool as RWeightedPool\r\n      const weightRatio = direction ? wPool.weight0 / wPool.weight1 : wPool.weight1 / wPool.weight0\r\n      const actualIn = amountIn * (1 - pool.fee)\r\n      const out = y * (1 - Math.pow(x / (x + actualIn), weightRatio))\r\n      return out\r\n    }\r\n    case PoolType.Hybrid: {\r\n      // const xNew = x + amountIn*(1-pool.fee);\r\n      // const yNew = HybridgetY(pool, xNew);\r\n      // const dy = y - yNew;\r\n\r\n      const xNewBN = xBN.add(getBigNumber(amountIn * (1 - pool.fee)))\r\n      const yNewBN = HybridgetY(pool as RHybridPool, xNewBN)\r\n      const dy = parseInt(yBN.sub(yNewBN).toString())\r\n\r\n      return dy\r\n    }\r\n    case PoolType.ConcentratedLiquidity: {\r\n      return ConcentratedLiquidityOutByIn(pool as RConcentratedLiquidityPool, amountIn, direction)\r\n    }\r\n  }\r\n}\r\n\r\nexport class OutOfLiquidity extends Error {}\r\n\r\nfunction ConcentratedLiquidityOutByIn(pool: RConcentratedLiquidityPool, inAmount: number, direction: boolean) {\r\n  if (pool.ticks.length === 0) return 0\r\n  if (pool.ticks[0].index > CL_MIN_TICK) pool.ticks.unshift({ index: CL_MIN_TICK, DLiquidity: 0 })\r\n  if (pool.ticks[pool.ticks.length - 1].index < CL_MAX_TICK) pool.ticks.push({ index: CL_MAX_TICK, DLiquidity: 0 })\r\n\r\n  let nextTickToCross = direction ? pool.nearestTick : pool.nearestTick + 1\r\n  let currentPrice = pool.sqrtPrice\r\n  let currentLiquidity = pool.liquidity\r\n  let outAmount = 0\r\n  let input = inAmount\r\n\r\n  while (input > 0) {\r\n    if (nextTickToCross < 0 || nextTickToCross >= pool.ticks.length) throw new OutOfLiquidity()\r\n\r\n    const nextTickPrice = Math.sqrt(Math.pow(1.0001, pool.ticks[nextTickToCross].index))\r\n    // console.log('L, P, tick, nextP', currentLiquidity,\r\n    //     currentPrice, pool.ticks[nextTickToCross].index, nextTickPrice);\r\n    let output = 0\r\n\r\n    if (direction) {\r\n      const maxDx = (currentLiquidity * (currentPrice - nextTickPrice)) / currentPrice / nextTickPrice\r\n      //console.log('input, maxDx', input, maxDx);\r\n\r\n      if (input <= maxDx) {\r\n        output = (currentLiquidity * currentPrice * input) / (input + currentLiquidity / currentPrice)\r\n        input = 0\r\n      } else {\r\n        output = currentLiquidity * (currentPrice - nextTickPrice)\r\n        currentPrice = nextTickPrice\r\n        input -= maxDx\r\n        if (pool.ticks[nextTickToCross].index % 2 === 0) {\r\n          currentLiquidity -= pool.ticks[nextTickToCross].DLiquidity\r\n        } else {\r\n          currentLiquidity += pool.ticks[nextTickToCross].DLiquidity\r\n        }\r\n        nextTickToCross--\r\n      }\r\n    } else {\r\n      const maxDy = currentLiquidity * (nextTickPrice - currentPrice)\r\n      //console.log('input, maxDy', input, maxDy);\r\n      if (input <= maxDy) {\r\n        output = input / currentPrice / (currentPrice + input / currentLiquidity)\r\n        input = 0\r\n      } else {\r\n        output = (currentLiquidity * (nextTickPrice - currentPrice)) / currentPrice / nextTickPrice\r\n        currentPrice = nextTickPrice\r\n        input -= maxDy\r\n        if (pool.ticks[nextTickToCross].index % 2 === 0) {\r\n          currentLiquidity += pool.ticks[nextTickToCross].DLiquidity\r\n        } else {\r\n          currentLiquidity -= pool.ticks[nextTickToCross].DLiquidity\r\n        }\r\n        nextTickToCross++\r\n      }\r\n    }\r\n\r\n    outAmount += output * (1 - pool.fee)\r\n    //console.log('out', outAmount);\r\n  }\r\n\r\n  return outAmount\r\n}\r\n\r\nexport function calcInByOut(pool: Pool, amountOut: number, direction: boolean): number {\r\n  let input = 0\r\n  const xBN = direction ? pool.reserve0 : pool.reserve1\r\n  const yBN = direction ? pool.reserve1 : pool.reserve0\r\n  switch (pool.type) {\r\n    case PoolType.ConstantProduct: {\r\n      const x = parseInt(xBN.toString())\r\n      const y = parseInt(yBN.toString())\r\n      input = (x * amountOut) / (1 - pool.fee) / (y - amountOut)\r\n      break\r\n    }\r\n    case PoolType.Weighted: {\r\n      const x = parseInt(xBN.toString())\r\n      const y = parseInt(yBN.toString())\r\n      const wPool = pool as RWeightedPool\r\n      const weightRatio = direction ? wPool.weight0 / wPool.weight1 : wPool.weight1 / wPool.weight0\r\n      input = x * (1 - pool.fee) * (Math.pow(1 - amountOut / y, -weightRatio) - 1)\r\n      break\r\n    }\r\n    case PoolType.Hybrid: {\r\n      let yNewBN = yBN.sub(getBigNumber(amountOut))\r\n      if (yNewBN.lt(1))\r\n        // lack of precision\r\n        yNewBN = BigNumber.from(1)\r\n\r\n      const xNewBN = HybridgetY(pool as RHybridPool, yNewBN)\r\n      input = Math.round(parseInt(xNewBN.sub(xBN).toString()) / (1 - pool.fee))\r\n\r\n      // const yNew = y - amountOut;\r\n      // const xNew = HybridgetY(pool, yNew);\r\n      // input = (xNew - x)/(1-pool.fee);\r\n      break\r\n    }\r\n    default:\r\n      console.error('Unknown pool type')\r\n  }\r\n\r\n  // ASSERT(() => {\r\n  //   const amount2 = calcOutByIn(pool, input, direction);\r\n  //   const res = closeValues(amountOut, amount2, 1e-6);\r\n  //   if (!res) console.log(\"Error 138:\", amountOut, amount2, Math.abs(amountOut/amount2 - 1));\r\n  //   return res;\r\n  // });\r\n  if (input < 1) input = 1\r\n  return input\r\n}\r\n\r\nexport function calcPrice(pool: Pool, amountIn: number, takeFeeIntoAccount = true): number {\r\n  const r0 = parseInt(pool.reserve0.toString())\r\n  const r1 = parseInt(pool.reserve1.toString())\r\n  const oneMinusFee = takeFeeIntoAccount ? 1 - pool.fee : 1\r\n  switch (pool.type) {\r\n    case PoolType.ConstantProduct: {\r\n      const x = r0 / oneMinusFee\r\n      return (r1 * x) / (x + amountIn) / (x + amountIn)\r\n    }\r\n    case PoolType.Weighted: {\r\n      const wPool = pool as RWeightedPool\r\n      const weightRatio = wPool.weight0 / wPool.weight1\r\n      const x = r0 + amountIn * oneMinusFee\r\n      return (r1 * weightRatio * oneMinusFee * Math.pow(r0 / x, weightRatio)) / x\r\n    }\r\n    case PoolType.Hybrid: {\r\n      const hPool = pool as RHybridPool\r\n      const D = parseInt(HybridComputeLiquidity(hPool).toString())\r\n      const A = hPool.A / A_PRECISION\r\n      const x = r0 + amountIn\r\n      const b = 4 * A * x + D - 4 * A * D\r\n      const ac4 = (D * D * D) / x\r\n      const Ds = Math.sqrt(b * b + 4 * A * ac4)\r\n      const res = (0.5 - (2 * b - ac4 / x) / Ds / 4) * oneMinusFee\r\n      return res\r\n    }\r\n  }\r\n  return 0\r\n}\r\n\r\nfunction calcInputByPriceConstantMean(pool: RWeightedPool, price: number) {\r\n  const r0 = parseInt(pool.reserve0.toString())\r\n  const r1 = parseInt(pool.reserve1.toString())\r\n  const weightRatio = pool.weight0 / pool.weight1\r\n  const t = r1 * price * weightRatio * (1 - pool.fee) * Math.pow(r0, weightRatio)\r\n  return (Math.pow(t, 1 / (weightRatio + 1)) - r0) / (1 - pool.fee)\r\n}\r\n\r\nexport function calcInputByPrice(pool: Pool, priceEffective: number, hint = 1): number {\r\n  switch (pool.type) {\r\n    case PoolType.ConstantProduct: {\r\n      const r0 = parseInt(pool.reserve0.toString())\r\n      const r1 = parseInt(pool.reserve1.toString())\r\n      const x = r0 / (1 - pool.fee)\r\n      const res = Math.sqrt(r1 * x * priceEffective) - x\r\n      return res\r\n    }\r\n    case PoolType.Weighted: {\r\n      const res = calcInputByPriceConstantMean(pool as RWeightedPool, priceEffective)\r\n      return res\r\n    }\r\n    case PoolType.Hybrid: {\r\n      return revertPositive((x: number) => 1 / calcPrice(pool, x), priceEffective, hint)\r\n    }\r\n  }\r\n  return 0\r\n}\r\n"],"names":["ASSERT","f","t","console","error","closeValues","a","b","accuracy","Math","abs","calcSquareEquation","c","D","assert","sqrtD","sqrt","revertPositive","out","hint","min","max","x0","y0","e","getBigNumber","value","Number","MAX_SAFE_INTEGER","BigNumber","from","round","exp","floor","log","LN2","shift","mant","pow","res","mul","TYPICAL_SWAP_GAS_COST","TYPICAL_MINIMAL_LIQUIDITY","RPool","address","token0","token1","fee","reserve0","reserve1","minLiquidity","swapGasCost","ConstantProductRPool","calcOutByIn","amountIn","direction","xBN","yBN","x","parseInt","toString","y","calcInByOut","amountOut","input","calcPrice","takeFeeIntoAccount","oneMinusFee","xf","calcInputByPrice","price","HybridRPool","A","computeLiquidity","eq","r0","r1","isZero","s","add","nA","prevD","i","dP","div","A_PRECISION","sub","lte","computeY","yPrev","xNewBN","yNewBN","dy","lt","xI","ac4","Ds","Edge","p","v0","v1","pool","vert0","vert1","amountInPrevious","amountOutPrevious","canBeUsed","spentGas","spentGasNew","bestEdgeIncome","reserve","v","calcOutput","gas","checkMinimalLiquidityExceededAfterSwap","testApply","inPrev","outPrev","to","getNeibour","directionNew","amountInNew","amountOutNew","inInc","outInc","inNew","outNew","calc","applySwap","bestIncome","Vertice","token","edges","gasPrice","gasSpent","bestTotal","bestSource","undefined","checkLine","Graph","pools","baseToken","vertices","tokens","Map","forEach","getOrCreateVertice","edge","push","baseVert","get","setPrices","map","sort","r2","vert","set","findBestPath","start","finish","processedVert","Set","nextVertList","closestVert","closestTotal","closestPosition","bestPath","unshift","path","output","totalOutput","splice","v2","has","newIncome","newGasSpent","newTotal","addPath","_from","every","total","totalModule","findBestRoute","mode","routeValues","Array","isArray","sum","reduce","gasSpentInit","totalrouted","step","length","status","RouteStatus","NoWay","fromToken","toToken","legs","totalAmountOut","Partial","Success","fromVert","toVert","getRouteLegs","topologyWasChanged","calcLegsAmountOut","cleanTopology","nodes","n","outEdges","getOutputEdges","edgeFrom","outAmount","quantity","swapPortion","absolutePortion","filter","getInputEdges","amounts","l","find","inputTotal","vertNext","prevAmount","result","topologySort","removeWeakestEdge","removeDeadEnds","verts","minVert","minVertNext","minOutput","MAX_VALUE","vertState","vertsFinished","foundCycle","foundDeadEndVerts","that","topSortRecursive","current","state","successors2Exist","reverse","findMultiRouting","steps","g","fromV","PoolType","Pool","_info","info","type","RConstantProductPool","ConstantProduct","RHybridPool","Hybrid","RWeightedPool","Weighted","weight0","weight1","CL_MIN_TICK","CL_MAX_TICK","RConcentratedLiquidityPool","ConcentratedLiquidity","liquidity","sqrtPrice","nearestTick","ticks","DCacheBN","HybridComputeLiquidity","HybridgetY","wPool","weightRatio","actualIn","ConcentratedLiquidityOutByIn","OutOfLiquidity","Error","inAmount","index","DLiquidity","nextTickToCross","currentPrice","currentLiquidity","nextTickPrice","maxDx","maxDy","hPool","calcInputByPriceConstantMean","priceEffective"],"mappings":"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"}