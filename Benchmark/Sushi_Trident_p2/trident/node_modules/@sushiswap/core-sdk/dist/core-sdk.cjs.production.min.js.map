{"version":3,"file":"core-sdk.cjs.production.min.js","sources":["../src/enums/ChainId.ts","../src/enums/Rounding.ts","../src/enums/TradeType.ts","../src/enums/ChainKey.ts","../src/constants/addresses.ts","../src/entities/AbstractCurrency.ts","../src/entities/NativeCurrency.ts","../src/functions/validateAndParseAddress.ts","../src/entities/Token.ts","../src/constants/tokens.ts","../src/entities/Native/Avalanche.ts","../src/entities/Native/Binance.ts","../src/entities/Native/Celo.ts","../src/entities/Native/Ether.ts","../src/entities/Native/Fantom.ts","../src/entities/Native/Harmony.ts","../src/entities/Native/Heco.ts","../src/entities/Native/Matic.ts","../src/entities/Native/Movr.ts","../src/entities/Native/Okex.ts","../src/entities/Native/xDai.ts","../src/entities/Native/Palm.ts","../src/entities/Native/Fuse.ts","../src/constants/index.ts","../src/constants/natives.ts","../src/constants/numbers.ts","../src/errors.ts","../src/entities/Fraction.ts","../src/entities/CurrencyAmount.ts","../src/entities/Price.ts","../src/functions/computePairAddress.ts","../src/functions/math.ts","../src/entities/Pair.ts","../src/entities/Percent.ts","../src/entities/Route.ts","../src/functions/computePriceImpact.ts","../src/functions/sortedInsert.ts","../src/entities/Trade.ts","../src/functions/contract.ts","../src/router.ts","../src/functions/rebase.ts","../src/functions/validateSolidityTypeInstance.ts"],"sourcesContent":["export enum ChainId {\n  MAINNET = 1,\n  ROPSTEN = 3,\n  RINKEBY = 4,\n  GÖRLI = 5,\n  KOVAN = 42,\n  MATIC = 137,\n  MATIC_TESTNET = 80001,\n  FANTOM = 250,\n  FANTOM_TESTNET = 4002,\n  XDAI = 100,\n  BSC = 56,\n  BSC_TESTNET = 97,\n  ARBITRUM = 42161,\n  ARBITRUM_TESTNET = 79377087078960,\n  MOONBEAM_TESTNET = 1287,\n  AVALANCHE = 43114,\n  AVALANCHE_TESTNET = 43113,\n  HECO = 128,\n  HECO_TESTNET = 256,\n  HARMONY = 1666600000,\n  HARMONY_TESTNET = 1666700000,\n  OKEX = 66,\n  OKEX_TESTNET = 65,\n  CELO = 42220,\n  PALM = 11297108109,\n  PALM_TESTNET = 11297108099,\n  MOONRIVER = 1285,\n  FUSE = 122,\n}\n","export enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP,\n}\n","export enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT,\n}\n","export enum ChainKey {\n  KOVAN = 'kovan',\n}\n","import { AddressMap } from '../types'\nimport { ChainId } from '../enums'\n\nexport const USDC_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48',\n  [ChainId.ROPSTEN]: '0x0D9C8723B343A8368BebE0B5E89273fF8D712e3C',\n  [ChainId.KOVAN]: '0xb7a4F3E9097C08dA09517b5aB877F7a917224ede',\n  [ChainId.MATIC]: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',\n  [ChainId.FANTOM]: '0x04068DA6C83AFCFA0e13ba15A6696662335D5B75',\n  [ChainId.BSC]: '0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d',\n  [ChainId.HARMONY]: '0x985458E523dB3d53125813eD68c274899e9DfAb4',\n  [ChainId.HECO]: '0x9362Bbef4B8313A8Aa9f0c9808B80577Aa26B73B',\n  [ChainId.OKEX]: '0xc946DAf81b08146B1C7A8Da2A851Ddf2B3EAaf85',\n  [ChainId.XDAI]: '0xDDAfbb505ad214D7b80b1f830fcCc89B60fb7A83',\n  [ChainId.ARBITRUM]: '0xFF970A61A04b1cA14834A43f5dE4533eBDDB5CC8',\n  [ChainId.AVALANCHE]: '0xA7D7079b0FEaD91F3e65f86E8915Cb59c1a4C664',\n}\n\nexport const FACTORY_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0xC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac',\n  [ChainId.ROPSTEN]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.RINKEBY]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.GÖRLI]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.KOVAN]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.FANTOM]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.FANTOM_TESTNET]: '',\n  [ChainId.MATIC]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.MATIC_TESTNET]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.XDAI]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.BSC]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.BSC_TESTNET]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.ARBITRUM]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.ARBITRUM_TESTNET]: '',\n  [ChainId.MOONBEAM_TESTNET]: '0x2Ce3F07dD4c62b56a502E223A7cBE38b1d77A1b5',\n  [ChainId.AVALANCHE]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.AVALANCHE_TESTNET]: '0xd00ae08403B9bbb9124bB305C09058E32C39A48c',\n  [ChainId.HECO]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.HECO_TESTNET]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.HARMONY]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.HARMONY_TESTNET]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.OKEX]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.OKEX_TESTNET]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.CELO]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.PALM]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.PALM_TESTNET]: '',\n  [ChainId.MOONRIVER]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.FUSE]: '0x43eA90e2b786728520e4f930d2A71a477BF2737C',\n}\n\nexport const ROUTER_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F',\n  [ChainId.RINKEBY]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.ROPSTEN]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.GÖRLI]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.KOVAN]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.FANTOM]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.FANTOM_TESTNET]: '',\n  [ChainId.MATIC]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.MATIC_TESTNET]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.XDAI]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.BSC]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.BSC_TESTNET]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.ARBITRUM]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.ARBITRUM_TESTNET]: '',\n  [ChainId.MOONBEAM_TESTNET]: '0xeB5c2BB5E83B51d83F3534Ae21E84336B8B376ef',\n  [ChainId.AVALANCHE]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.AVALANCHE_TESTNET]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.HECO]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.HECO_TESTNET]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.HARMONY]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.HARMONY_TESTNET]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.OKEX]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.OKEX_TESTNET]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.CELO]: '0x1421bDe4B10e8dd459b3BCb598810B1337D56842',\n  [ChainId.PALM]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.PALM_TESTNET]: '',\n  [ChainId.MOONRIVER]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.FUSE]: '0xF4d73326C13a4Fc5FD7A064217e12780e9Bd62c3',\n}\n\nexport const SUSHI_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0x6B3595068778DD592e39A122f4f5a5cF09C90fE2',\n  [ChainId.ROPSTEN]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\n  [ChainId.RINKEBY]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\n  [ChainId.GÖRLI]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\n  [ChainId.KOVAN]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\n  [ChainId.FANTOM]: '0xae75A438b2E0cB8Bb01Ec1E1e376De11D44477CC',\n  [ChainId.MATIC]: '0x0b3F868E0BE5597D5DB7fEB59E1CADBb0fdDa50a',\n  [ChainId.XDAI]: '0x2995D1317DcD4f0aB89f4AE60F3f020A4F17C7CE',\n  [ChainId.BSC]: '0x947950BcC74888a40Ffa2593C5798F11Fc9124C4',\n  [ChainId.ARBITRUM]: '0xd4d42F0b6DEF4CE0383636770eF773390d85c61A',\n  [ChainId.AVALANCHE]: '0x39cf1BD5f15fb22eC3D9Ff86b0727aFc203427cc',\n  [ChainId.HECO]: '0x52E00B2dA5Bd7940fFe26B609A42F957f31118D5',\n  [ChainId.HARMONY]: '0xBEC775Cb42AbFa4288dE81F387a9b1A3c4Bc552A',\n  [ChainId.OKEX]: '0x2218E0D5E0173769F5b4939a3aE423f7e5E4EAB7',\n  [ChainId.OKEX_TESTNET]: '',\n  [ChainId.CELO]: '0xD15EC721C2A896512Ad29C671997DD68f9593226',\n  [ChainId.PALM]: '',\n  [ChainId.PALM_TESTNET]: '',\n}\n\nexport const MASTERCHEF_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0xc2EdaD668740f1aA35E4D8f227fB8E17dcA888Cd',\n  [ChainId.ROPSTEN]: '0x80C7DD17B01855a6D2347444a0FCC36136a314de',\n  [ChainId.RINKEBY]: '0x80C7DD17B01855a6D2347444a0FCC36136a314de',\n  [ChainId.GÖRLI]: '0x80C7DD17B01855a6D2347444a0FCC36136a314de',\n  [ChainId.KOVAN]: '0x80C7DD17B01855a6D2347444a0FCC36136a314de',\n}\n\nexport const BAR_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0x8798249c2E607446EfB7Ad49eC89dD1865Ff4272',\n  [ChainId.ROPSTEN]: '0x1be211D8DA40BC0ae8719c6663307Bfc987b1d6c',\n  [ChainId.RINKEBY]: '0x1be211D8DA40BC0ae8719c6663307Bfc987b1d6c',\n  [ChainId.GÖRLI]: '0x1be211D8DA40BC0ae8719c6663307Bfc987b1d6c',\n  [ChainId.KOVAN]: '0x1be211D8DA40BC0ae8719c6663307Bfc987b1d6c',\n}\n\nexport const MAKER_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0xE11fc0B43ab98Eb91e9836129d1ee7c3Bc95df50',\n  [ChainId.ROPSTEN]: '0x1b9d177CcdeA3c79B6c8F40761fc8Dc9d0500EAa',\n  [ChainId.RINKEBY]: '0x1b9d177CcdeA3c79B6c8F40761fc8Dc9d0500EAa',\n  [ChainId.GÖRLI]: '0x1b9d177CcdeA3c79B6c8F40761fc8Dc9d0500EAa',\n  [ChainId.KOVAN]: '0x1b9d177CcdeA3c79B6c8F40761fc8Dc9d0500EAa',\n}\n\nexport const TIMELOCK_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0x9a8541Ddf3a932a9A922B607e9CF7301f1d47bD1',\n}\n\nexport const BENTOBOX_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\n  [ChainId.ROPSTEN]: '0x6BdD85290001C8Aef74f35A7606065FA15aD5ACF',\n  [ChainId.RINKEBY]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\n  [ChainId.GÖRLI]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\n  [ChainId.KOVAN]: '0xc381a85ed7C7448Da073b7d6C9d4cBf1Cbf576f0',\n  [ChainId.FANTOM]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\n  [ChainId.MATIC]: '0x0319000133d3AdA02600f0875d2cf03D442C3367',\n  [ChainId.MATIC_TESTNET]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\n  [ChainId.XDAI]: '0xE2d7F5dd869Fc7c126D21b13a9080e75a4bDb324',\n  [ChainId.BSC]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\n  [ChainId.BSC_TESTNET]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\n  [ChainId.ARBITRUM]: '0x74c764D41B77DBbb4fe771daB1939B00b146894A',\n  [ChainId.AVALANCHE]: '0x0711B6026068f736bae6B213031fCE978D48E026',\n  [ChainId.HECO]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\n}\n\nexport const KASHI_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0x2cBA6Ab6574646Badc84F0544d05059e57a5dc42',\n  [ChainId.KOVAN]: '0x2cBA6Ab6574646Badc84F0544d05059e57a5dc42',\n  [ChainId.MATIC]: '0xB527C5295c4Bc348cBb3a2E96B2494fD292075a7',\n  [ChainId.XDAI]: '0x7a6DA9903d0a481F40b8336c1463487BC8C0407e',\n  [ChainId.BSC]: '0x2cBA6Ab6574646Badc84F0544d05059e57a5dc42',\n  [ChainId.ARBITRUM]: '0xa010eE0226cd071BeBd8919A1F675cAE1f1f5D3e',\n  [ChainId.AVALANCHE]: '0x513037395FA0C9c35E41f89189ceDfE3bD42fAdb',\n  [ChainId.AVALANCHE_TESTNET]: '',\n  [ChainId.HECO]: '0x2cBA6Ab6574646Badc84F0544d05059e57a5dc42',\n}\n\nexport const SUSHISWAP_SWAPPER_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0x1766733112408b95239aD1951925567CB1203084',\n  [ChainId.MATIC]: '0xe9589382130Ded5DF2397E2fD7A3E9b41DD2701D',\n  [ChainId.XDAI]: '0xE02BDb31C353CE95A1D74F81C93eEa70Bf7371B9',\n  [ChainId.BSC]: '0x1766733112408b95239aD1951925567CB1203084',\n  [ChainId.ARBITRUM]: '0x0bFcD5dD76218bF9e3BE8A1055f9e6D27E5745eb',\n  [ChainId.AVALANCHE]: '0x062eee8B38ab5E8ee3bc58CE505939db53E63785',\n  [ChainId.HECO]: '0x1766733112408b95239aD1951925567CB1203084',\n}\n\nexport const SUSHISWAP_MULTISWAPPER_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0x545820d5Cc05248da112419fEfb18522c63C8e12',\n  [ChainId.KOVAN]: '0xc0c1649b2c67f1a9f5ff1dd618188165e2555bcf',\n  [ChainId.MATIC]: '0x73BE093B84c773fe8eE0f76DDc0829E45c215415',\n  [ChainId.XDAI]: '0x735f0FbEb3b6389986BcaAf073Af07D2F8be2b93',\n  [ChainId.BSC]: '0x86c655cAc122e9A2fd9Ae1f79Df27b30E357968c',\n  [ChainId.ARBITRUM]: '0xbe7D5968296843756109D42946D01195320922EF',\n  [ChainId.AVALANCHE]: '0xB7C8b5BFcd7212f034Be42a2aAb08b8773B76920',\n}\n\nexport const SUSHISWAP_MULTI_EXACT_SWAPPER_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0xB527C5295c4Bc348cBb3a2E96B2494fD292075a7',\n  [ChainId.KOVAN]: '0x75AE0Aa596D39b20addC921DeB5EE3c96279dABE',\n  [ChainId.MATIC]: '0xDB6C4EDd9545d3b815dA85E6429B699c418886f9',\n  [ChainId.XDAI]: '0x07b6e34EeCF38B02e83b6B4702699717e298967E',\n  [ChainId.BSC]: '0x1B16149Edaf1EFa6ADE6aEEF33e63C6e08c9bB1B',\n  [ChainId.ARBITRUM]: '0x860D841bfD1cfEf72A14B2b734005799F07dC7ED',\n  [ChainId.AVALANCHE]: '0x2c46217Fae90D302d1Fb5467ADA504bC2A84f448',\n}\n\nexport const PEGGED_ORACLE_ADDRESS = '0x6cbfbB38498Df0E1e7A4506593cDB02db9001564'\n\nexport const SUSHISWAP_TWAP_0_ORACLE_ADDRESS = '0x66F03B0d30838A3fee971928627ea6F59B236065'\n\nexport const SUSHISWAP_TWAP_1_ORACLE_ADDRESS = '0x0D51b575591F8f74a2763Ade75D3CDCf6789266f'\n\nexport const CHAINLINK_ORACLE_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0x00632CFe43d8F9f8E6cD0d39Ffa3D4fa7ec73CFB',\n  [ChainId.MATIC]: '0x00632CFe43d8F9f8E6cD0d39Ffa3D4fa7ec73CFB',\n  [ChainId.XDAI]: '0x00632CFe43d8F9f8E6cD0d39Ffa3D4fa7ec73CFB',\n  [ChainId.BSC]: '0x00632CFe43d8F9f8E6cD0d39Ffa3D4fa7ec73CFB',\n  [ChainId.ARBITRUM]: '0xB2B5C26B6868be10fF77e4E233fD231ceB90162a',\n  [ChainId.AVALANCHE]: '0x43198B6fA5d89B88D2E072fA4841724571De5A59',\n}\n\nexport const BORING_HELPER_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0x11Ca5375AdAfd6205E41131A4409f182677996E6',\n  [ChainId.KOVAN]: '0x11Ca5375AdAfd6205E41131A4409f182677996E6',\n  [ChainId.MATIC]: '0xA77a7fD5a16237B85E0FAd02C51f459D18AE93Cd',\n  [ChainId.XDAI]: '0x97e4a0fb71243A83A6FbaEF7Cf73617594e4cF2F',\n  [ChainId.BSC]: '0x11Ca5375AdAfd6205E41131A4409f182677996E6',\n  [ChainId.ARBITRUM]: '0x37B3287292De241278fB5FCa514a756E0BE924f8',\n  [ChainId.AVALANCHE]: '0xD18cA07a599bf5eBb9B7327871ad682F0b660748',\n  [ChainId.HECO]: '0x11Ca5375AdAfd6205E41131A4409f182677996E6',\n}\n\nexport const ARCHER_ROUTER_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0x9917C083FF9FbD29Df1367FBF7F2388A9a202431',\n}\n\nexport const MINICHEF_ADDRESS: AddressMap = {\n  [ChainId.MATIC]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\n  [ChainId.XDAI]: '0xdDCbf776dF3dE60163066A5ddDF2277cB445E0F3',\n  [ChainId.HARMONY]: '0x67dA5f2FfaDDfF067AB9d5F025F8810634d84287',\n  [ChainId.ARBITRUM]: '0xF4d73326C13a4Fc5FD7A064217e12780e9Bd62c3',\n}\n\nexport const WETH9_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n  [ChainId.ROPSTEN]: '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n  [ChainId.RINKEBY]: '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n  [ChainId.GÖRLI]: '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6',\n  [ChainId.KOVAN]: '0xd0A1E359811322d97991E03f863a0C30C2cF029C',\n  [ChainId.ARBITRUM]: '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1',\n  [ChainId.ARBITRUM_TESTNET]: '0xf8456e5e6A225C2C1D74D8C9a4cB2B1d5dc1153b',\n  [ChainId.BSC]: '0x2170Ed0880ac9A755fd29B2688956BD959F933F8',\n  [ChainId.FANTOM]: '0x74b23882a30290451A17c44f4F05243b6b58C76d',\n  [ChainId.MATIC]: '0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619',\n  [ChainId.OKEX]: '0x2170Ed0880ac9A755fd29B2688956BD959F933F8',\n  [ChainId.HECO]: '0x64FF637fB478863B7468bc97D30a5bF3A428a1fD',\n  [ChainId.HARMONY]: '0x6983D1E6DEf3690C4d616b13597A09e6193EA013',\n  [ChainId.XDAI]: '0x6A023CCd1ff6F2045C3309768eAd9E68F978f6e1',\n  [ChainId.AVALANCHE]: '0xf20d962a6c8f70c731bd838a3a388D7d48fA6e15',\n}\n\nexport const WNATIVE_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: WETH9_ADDRESS[ChainId.MAINNET],\n  [ChainId.ROPSTEN]: WETH9_ADDRESS[ChainId.ROPSTEN],\n  [ChainId.RINKEBY]: WETH9_ADDRESS[ChainId.RINKEBY],\n  [ChainId.GÖRLI]: WETH9_ADDRESS[ChainId.GÖRLI],\n  [ChainId.KOVAN]: WETH9_ADDRESS[ChainId.KOVAN],\n  [ChainId.ARBITRUM]: WETH9_ADDRESS[ChainId.ARBITRUM],\n  [ChainId.ARBITRUM_TESTNET]: WETH9_ADDRESS[ChainId.ARBITRUM_TESTNET],\n  [ChainId.FANTOM]: '0x21be370D5312f44cB42ce377BC9b8a0cEF1A4C83',\n  [ChainId.FANTOM_TESTNET]: '0xf1277d1Ed8AD466beddF92ef448A132661956621',\n  [ChainId.MATIC]: '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270',\n  [ChainId.MATIC_TESTNET]: '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270',\n  [ChainId.XDAI]: '0xe91D153E0b41518A2Ce8Dd3D7944Fa863463a97d',\n  [ChainId.BSC]: '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\n  [ChainId.BSC_TESTNET]: '0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd',\n  [ChainId.MOONBEAM_TESTNET]: '0xe73763DB808ecCDC0E36bC8E32510ED126910394',\n  [ChainId.AVALANCHE]: '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7',\n  [ChainId.AVALANCHE_TESTNET]: '0xd00ae08403B9bbb9124bB305C09058E32C39A48c',\n  [ChainId.HECO]: '0x5545153CCFcA01fbd7Dd11C0b23ba694D9509A6F',\n  [ChainId.HECO_TESTNET]: '0x5B2DA6F42CA09C77D577a12BeaD0446148830687',\n  [ChainId.HARMONY]: '0xcF664087a5bB0237a0BAd6742852ec6c8d69A27a',\n  [ChainId.HARMONY_TESTNET]: '0x7a2afac38517d512E55C0bCe3b6805c10a04D60F',\n  [ChainId.OKEX]: '0x8F8526dbfd6E38E3D8307702cA8469Bae6C56C15',\n  [ChainId.OKEX_TESTNET]: '0x2219845942d28716c0F7C605765fABDcA1a7d9E0',\n  [ChainId.CELO]: '0x471EcE3750Da237f93B8E339c536989b8978a438',\n  [ChainId.PALM]: '0xF98cABF0a963452C5536330408B2590567611a71',\n  [ChainId.MOONRIVER]: '0xf50225a84382c74CbdeA10b0c176f71fc3DE0C4d',\n  [ChainId.FUSE]: '0x0BE9e53fd7EDaC9F859882AfdDa116645287C629',\n}\n\nexport const MASTERCHEF_V2_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0xEF0881eC094552b2e128Cf945EF17a6752B4Ec5d',\n}\n\nexport const ENS_REGISTRAR_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e',\n  [ChainId.GÖRLI]: '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e',\n  [ChainId.ROPSTEN]: '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e',\n  [ChainId.RINKEBY]: '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e',\n}\n\nexport const ZAPPER_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0xcff6eF0B9916682B37D80c19cFF8949bc1886bC2',\n  [ChainId.ROPSTEN]: '0xcff6eF0B9916682B37D80c19cFF8949bc1886bC2',\n}\n\nexport const MERKLE_DISTRIBUTOR_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0xcBE6B83e77cdc011Cc18F6f0Df8444E5783ed982',\n  [ChainId.ROPSTEN]: '0x84d1f7202e0e7dac211617017ca72a2cb5e2b955',\n}\n\nexport const MULTICALL2_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0x5BA1e12693Dc8F9c48aAD8770482f4739bEeD696',\n  [ChainId.ROPSTEN]: '0x5BA1e12693Dc8F9c48aAD8770482f4739bEeD696',\n  [ChainId.RINKEBY]: '0x5BA1e12693Dc8F9c48aAD8770482f4739bEeD696',\n  [ChainId.GÖRLI]: '0x5BA1e12693Dc8F9c48aAD8770482f4739bEeD696',\n  [ChainId.KOVAN]: '0x5BA1e12693Dc8F9c48aAD8770482f4739bEeD696',\n  [ChainId.ARBITRUM]: '0x80C7DD17B01855a6D2347444a0FCC36136a314de',\n  [ChainId.ARBITRUM_TESTNET]: '0xa501c031958F579dB7676fF1CE78AD305794d579',\n  [ChainId.CELO]: '0x9aac9048fC8139667D6a2597B902865bfdc225d3',\n  [ChainId.FANTOM]: '0x22D4cF72C45F8198CfbF4B568dBdB5A85e8DC0B5',\n  [ChainId.MATIC]: '0x02817C1e3543c2d908a590F5dB6bc97f933dB4BD',\n  [ChainId.XDAI]: '0x67dA5f2FfaDDfF067AB9d5F025F8810634d84287',\n  [ChainId.BSC]: '0xa9193376D09C7f31283C54e56D013fCF370Cd9D9',\n  [ChainId.AVALANCHE]: '0xdDCbf776dF3dE60163066A5ddDF2277cB445E0F3',\n  [ChainId.HECO]: '0xdDCbf776dF3dE60163066A5ddDF2277cB445E0F3',\n  [ChainId.HARMONY]: '0xdDCbf776dF3dE60163066A5ddDF2277cB445E0F3',\n  [ChainId.OKEX]: '0xF4d73326C13a4Fc5FD7A064217e12780e9Bd62c3',\n  [ChainId.PALM]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\n  [ChainId.MOONRIVER]: '0x270f2F35bED92B7A59eA5F08F6B3fd34c8D9D9b5',\n  [ChainId.FUSE]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\n}\n","import { Currency } from './Currency'\nimport { Token } from './Token'\nimport invariant from 'tiny-invariant'\n\n/**\n * A currency is any fungible financial instrument, including Ether, all ERC20 tokens, and other chain-native currencies\n */\nexport abstract class AbstractCurrency {\n  /**\n   * Returns whether the currency is native to the chain and must be wrapped (e.g. Ether)\n   */\n  public abstract readonly isNative: boolean\n  /**\n   * Returns whether the currency is a token that is usable in Uniswap without wrapping\n   */\n  public abstract readonly isToken: boolean\n\n  /**\n   * The chain ID on which this currency resides\n   */\n  public readonly chainId: number\n  /**\n   * The decimals used in representing currency amounts\n   */\n  public readonly decimals: number\n  /**\n   * The symbol of the currency, i.e. a short textual non-unique identifier\n   */\n  public readonly symbol?: string\n  /**\n   * The name of the currency, i.e. a descriptive textual non-unique identifier\n   */\n  public readonly name?: string\n\n  /**\n   * Constructs an instance of the base class `BaseCurrency`.\n   * @param chainId the chain ID on which this currency resides\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(chainId: number, decimals: number, symbol?: string, name?: string) {\n    invariant(Number.isSafeInteger(chainId), 'CHAIN_ID')\n    invariant(decimals >= 0 && decimals < 255 && Number.isInteger(decimals), 'DECIMALS')\n\n    this.chainId = chainId\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n\n  /**\n   * Returns whether this currency is functionally equivalent to the other currency\n   * @param other the other currency\n   */\n  public abstract equals(other: Currency): boolean\n\n  /**\n   * Return the wrapped version of this currency that can be used with the Uniswap contracts. Currencies must\n   * implement this to be used in Uniswap\n   */\n  public abstract get wrapped(): Token\n}\n","import { AbstractCurrency } from './AbstractCurrency'\n\n/**\n * Represents the native currency of the chain on which it resides, e.g.\n */\nexport abstract class NativeCurrency extends AbstractCurrency {\n  public readonly isNative: true = true\n  public readonly isToken: false = false\n}\n","import { getAddress } from '@ethersproject/address'\nimport invariant from 'tiny-invariant'\nimport warning from 'tiny-warning'\n\n// warns if addresses are not checksummed\nexport function validateAndParseAddress(address: string): string {\n  try {\n    const checksummedAddress = getAddress(address)\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\n    return checksummedAddress\n  } catch (error) {\n    invariant(false, `${address} is not a valid address.`)\n  }\n}\n","import { AbstractCurrency } from './AbstractCurrency'\nimport { Currency } from './Currency'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from '../functions/validateAndParseAddress'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends AbstractCurrency {\n  public readonly chainId: number\n  public readonly address: string\n\n  public readonly isNative: false = false\n  public readonly isToken: true = true\n\n  public constructor(chainId: number, address: string, decimals: number, symbol?: string, name?: string) {\n    super(chainId, decimals, symbol, name)\n    this.chainId = chainId\n    this.address = validateAndParseAddress(address)\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Currency): boolean {\n    return other.isToken && this.chainId === other.chainId && this.address === other.address\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address !== other.address, 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n\n  /**\n   * Return this token, which does not need to be wrapped\n   */\n  public get wrapped(): Token {\n    return this\n  }\n}\n\n/**\n * Compares two currencies for equality\n */\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\n  if (currencyA instanceof Token && currencyB instanceof Token) {\n    return currencyA.equals(currencyB)\n  } else if (currencyA instanceof Token) {\n    return false\n  } else if (currencyB instanceof Token) {\n    return false\n  } else {\n    return currencyA === currencyB\n  }\n}\n","import { USDC_ADDRESS, WETH9_ADDRESS, WNATIVE_ADDRESS } from './addresses'\n\nimport { ChainId } from '../enums'\nimport { Token } from '../entities/Token'\nimport { TokenMap } from '../types/TokenMap'\n\nexport const USDC: TokenMap = {\n  [ChainId.MAINNET]: new Token(ChainId.MAINNET, USDC_ADDRESS[ChainId.MAINNET], 6, 'USDC', 'USD Coin'),\n  [ChainId.ROPSTEN]: new Token(ChainId.ROPSTEN, USDC_ADDRESS[ChainId.ROPSTEN], 6, 'USDC', 'USD Coin'),\n  [ChainId.KOVAN]: new Token(ChainId.KOVAN, USDC_ADDRESS[ChainId.KOVAN], 6, 'USDC', 'USD Coin'),\n  [ChainId.MATIC]: new Token(ChainId.MATIC, USDC_ADDRESS[ChainId.MATIC], 6, 'USDC', 'USD Coin'),\n  [ChainId.FANTOM]: new Token(ChainId.FANTOM, USDC_ADDRESS[ChainId.FANTOM], 6, 'USDC', 'USD Coin'),\n  [ChainId.BSC]: new Token(ChainId.BSC, USDC_ADDRESS[ChainId.BSC], 18, 'USDC', 'USD Coin'),\n  [ChainId.HARMONY]: new Token(ChainId.HARMONY, USDC_ADDRESS[ChainId.HARMONY], 6, 'USDC', 'USD Coin'),\n  [ChainId.HECO]: new Token(ChainId.HECO, USDC_ADDRESS[ChainId.HECO], 6, 'USDC', 'USD Coin'),\n  [ChainId.OKEX]: new Token(ChainId.OKEX, USDC_ADDRESS[ChainId.OKEX], 18, 'USDC', 'USD Coin'),\n  [ChainId.XDAI]: new Token(ChainId.XDAI, USDC_ADDRESS[ChainId.XDAI], 6, 'USDC', 'USD Coin'),\n  [ChainId.ARBITRUM]: new Token(ChainId.ARBITRUM, USDC_ADDRESS[ChainId.ARBITRUM], 6, 'USDC', 'USD Coin'),\n}\n\nexport const WETH9: TokenMap = {\n  [ChainId.MAINNET]: new Token(ChainId.MAINNET, WETH9_ADDRESS[ChainId.MAINNET], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.ROPSTEN]: new Token(ChainId.ROPSTEN, WETH9_ADDRESS[ChainId.ROPSTEN], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.RINKEBY]: new Token(ChainId.RINKEBY, WETH9_ADDRESS[ChainId.RINKEBY], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.GÖRLI]: new Token(ChainId.GÖRLI, WETH9_ADDRESS[ChainId.GÖRLI], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.KOVAN]: new Token(ChainId.KOVAN, WETH9_ADDRESS[ChainId.KOVAN], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.ARBITRUM]: new Token(ChainId.ARBITRUM, WETH9_ADDRESS[ChainId.ARBITRUM], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.ARBITRUM_TESTNET]: new Token(\n    ChainId.ARBITRUM_TESTNET,\n    WETH9_ADDRESS[ChainId.ARBITRUM_TESTNET],\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.BSC]: new Token(ChainId.BSC, WETH9_ADDRESS[ChainId.BSC], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.FANTOM]: new Token(ChainId.FANTOM, WETH9_ADDRESS[ChainId.FANTOM], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.MATIC]: new Token(ChainId.MATIC, WETH9_ADDRESS[ChainId.MATIC], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.OKEX]: new Token(ChainId.OKEX, WETH9_ADDRESS[ChainId.OKEX], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.HECO]: new Token(ChainId.HECO, WETH9_ADDRESS[ChainId.HECO], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.HARMONY]: new Token(ChainId.HARMONY, WETH9_ADDRESS[ChainId.HARMONY], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.XDAI]: new Token(ChainId.XDAI, WETH9_ADDRESS[ChainId.XDAI], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.AVALANCHE]: new Token(ChainId.AVALANCHE, WETH9_ADDRESS[ChainId.AVALANCHE], 18, 'WETH', 'Wrapped Ether'),\n}\n\nexport const WNATIVE: TokenMap = {\n  [ChainId.MAINNET]: WETH9[ChainId.MAINNET],\n  [ChainId.ROPSTEN]: WETH9[ChainId.ROPSTEN],\n  [ChainId.RINKEBY]: WETH9[ChainId.RINKEBY],\n  [ChainId.GÖRLI]: WETH9[ChainId.GÖRLI],\n  [ChainId.KOVAN]: WETH9[ChainId.KOVAN],\n  [ChainId.FANTOM]: new Token(ChainId.FANTOM, WNATIVE_ADDRESS[ChainId.FANTOM], 18, 'WFTM', 'Wrapped FTM'),\n  [ChainId.FANTOM_TESTNET]: new Token(\n    ChainId.FANTOM_TESTNET,\n    WNATIVE_ADDRESS[ChainId.FANTOM_TESTNET],\n    18,\n    'FTM',\n    'Wrapped FTM'\n  ),\n  [ChainId.MATIC]: new Token(ChainId.MATIC, WNATIVE_ADDRESS[ChainId.MATIC], 18, 'WMATIC', 'Wrapped Matic'),\n  [ChainId.MATIC_TESTNET]: new Token(\n    ChainId.MATIC_TESTNET,\n    WNATIVE_ADDRESS[ChainId.MATIC_TESTNET],\n    18,\n    'WMATIC',\n    'Wrapped Matic'\n  ),\n  [ChainId.XDAI]: new Token(ChainId.XDAI, WNATIVE_ADDRESS[ChainId.XDAI], 18, 'WXDAI', 'Wrapped xDai'),\n  [ChainId.BSC]: new Token(ChainId.BSC, WNATIVE_ADDRESS[ChainId.BSC], 18, 'WBNB', 'Wrapped BNB'),\n  [ChainId.BSC_TESTNET]: new Token(\n    ChainId.BSC_TESTNET,\n    WNATIVE_ADDRESS[ChainId.BSC_TESTNET],\n    18,\n    'WBNB',\n    'Wrapped BNB'\n  ),\n  [ChainId.ARBITRUM]: WETH9[ChainId.ARBITRUM],\n  [ChainId.ARBITRUM_TESTNET]: WETH9[ChainId.ARBITRUM_TESTNET],\n  [ChainId.MOONBEAM_TESTNET]: new Token(\n    ChainId.MOONBEAM_TESTNET,\n    WNATIVE_ADDRESS[ChainId.MOONBEAM_TESTNET],\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.AVALANCHE]: new Token(ChainId.AVALANCHE, WNATIVE_ADDRESS[ChainId.AVALANCHE], 18, 'WAVAX', 'Wrapped AVAX'),\n  [ChainId.AVALANCHE_TESTNET]: new Token(\n    ChainId.AVALANCHE_TESTNET,\n    WNATIVE_ADDRESS[ChainId.AVALANCHE_TESTNET],\n    18,\n    'WAVAX',\n    'Wrapped AVAX'\n  ),\n  [ChainId.HECO]: new Token(ChainId.HECO, WNATIVE_ADDRESS[ChainId.HECO], 18, 'WHT', 'Wrapped HT'),\n  [ChainId.HECO_TESTNET]: new Token(\n    ChainId.HECO_TESTNET,\n    WNATIVE_ADDRESS[ChainId.HECO_TESTNET],\n    18,\n    'WHT',\n    'Wrapped HT'\n  ),\n  [ChainId.HARMONY]: new Token(ChainId.HARMONY, WNATIVE_ADDRESS[ChainId.HARMONY], 18, 'WONE', 'Wrapped ONE'),\n  [ChainId.HARMONY_TESTNET]: new Token(\n    ChainId.HARMONY_TESTNET,\n    WNATIVE_ADDRESS[ChainId.HARMONY_TESTNET],\n    18,\n    'WONE',\n    'Wrapped ONE'\n  ),\n  [ChainId.OKEX]: new Token(ChainId.OKEX, WNATIVE_ADDRESS[ChainId.OKEX], 18, 'WOKT', 'Wrapped OKExChain'),\n  [ChainId.OKEX_TESTNET]: new Token(\n    ChainId.OKEX_TESTNET,\n    WNATIVE_ADDRESS[ChainId.OKEX_TESTNET],\n    18,\n    'WOKT',\n    'Wrapped OKExChain'\n  ),\n  [ChainId.CELO]: new Token(ChainId.CELO, WNATIVE_ADDRESS[ChainId.CELO], 18, 'CELO', 'Celo'),\n  [ChainId.PALM]: new Token(ChainId.PALM, WNATIVE_ADDRESS[ChainId.PALM], 18, 'WPALM', 'Wrapped Palm'),\n  [ChainId.MOONRIVER]: new Token(\n    ChainId.MOONRIVER,\n    WNATIVE_ADDRESS[ChainId.MOONRIVER],\n    18,\n    'WMOVR',\n    'Wrapped Moonriver'\n  ),\n  [ChainId.FUSE]: new Token(ChainId.FUSE, WNATIVE_ADDRESS[ChainId.FUSE], 18, 'WFUSE', 'Wrapped Fuse'),\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Avalanche extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'AVAX', 'Avalanche')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Avalanche } = {}\n\n  public static onChain(chainId: number): Avalanche {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Avalanche(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Binance extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'BNB', 'Binance Coin')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Binance } = {}\n\n  public static onChain(chainId: number): Binance {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Binance(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Celo extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'CELO', 'Celo')\n  }\n\n  public get wrapped(): Token {\n    const wcelo = WNATIVE[this.chainId]\n    invariant(!!wcelo, 'WRAPPED')\n    return wcelo\n  }\n\n  private static _cache: { [chainId: number]: Celo } = {}\n\n  public static onChain(chainId: number): Celo {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Celo(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WETH9 } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\n/**\n * Ether is the main usage of a 'native' currency, i.e. for Ethereum mainnet and all testnets\n */\nexport class Ether extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'ETH', 'Ether')\n  }\n\n  public get wrapped(): Token {\n    const weth9 = WETH9[this.chainId]\n    invariant(!!weth9, 'WRAPPED')\n    return weth9\n  }\n\n  private static _etherCache: { [chainId: number]: Ether } = {}\n\n  public static onChain(chainId: number): Ether {\n    return this._etherCache[chainId] ?? (this._etherCache[chainId] = new Ether(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Fantom extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'FTM', 'Fantom')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Fantom } = {}\n\n  public static onChain(chainId: number): Fantom {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Fantom(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Harmony extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'ONE', 'Harmony')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Harmony } = {}\n\n  public static onChain(chainId: number): Harmony {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Harmony(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Heco extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'HT', 'Huobi Token')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Heco } = {}\n\n  public static onChain(chainId: number): Heco {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Heco(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Matic extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'MATIC', 'Matic')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Matic } = {}\n\n  public static onChain(chainId: number): Matic {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Matic(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Movr extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'MOVR', 'Moonriver')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Movr } = {}\n\n  public static onChain(chainId: number): Movr {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Movr(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Okex extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'OKT', 'OKExChain')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Okex } = {}\n\n  public static onChain(chainId: number): Okex {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Okex(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class xDai extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'XDAI', 'xDai')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: xDai } = {}\n\n  public static onChain(chainId: number): xDai {\n    return this._cache[chainId] ?? (this._cache[chainId] = new xDai(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Palm extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'PALM', 'Palm')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Palm } = {}\n\n  public static onChain(chainId: number): Palm {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Palm(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Fuse extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'FUSE', 'Fuse')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Fuse } = {}\n\n  public static onChain(chainId: number): Fuse {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Fuse(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { ChainId, ChainKey } from '../enums'\n\nimport JSBI from 'jsbi'\n\nexport * from './addresses'\nexport * from './natives'\nexport * from './numbers'\nexport * from './tokens'\n\n// export const INIT_CODE_HASH: string = '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303'\n\nexport const CHAIN_KEY: { [chainId: number]: ChainKey } = {\n  [ChainId.KOVAN]: ChainKey.KOVAN,\n}\n\nexport const INIT_CODE_HASH: { [chainId: number]: string } = {\n  [ChainId.MAINNET]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.ROPSTEN]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.RINKEBY]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.GÖRLI]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.KOVAN]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.FANTOM]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.MATIC]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.MATIC_TESTNET]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.XDAI]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.BSC]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.BSC_TESTNET]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.ARBITRUM]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.MOONBEAM_TESTNET]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.AVALANCHE]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.AVALANCHE_TESTNET]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.HECO]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.HECO_TESTNET]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.HARMONY]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.HARMONY_TESTNET]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.OKEX]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.OKEX_TESTNET]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.CELO]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.PALM]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.MOONRIVER]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.FUSE]: '0x1901958ef8b470f2c0a3875a79ee0bd303866d85102c0f1ea820d317024d50b5',\n}\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\nexport enum SolidityType {\n  uint8 = 'uint8',\n  uint256 = 'uint256',\n}\n\nexport const SOLIDITY_TYPE_MAXIMA = {\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'),\n}\n","import {\n  Avalanche,\n  Binance,\n  Celo,\n  Ether,\n  Fantom,\n  Fuse,\n  Harmony,\n  Heco,\n  Matic,\n  Movr,\n  Okex,\n  Palm,\n  xDai,\n} from '../entities/Native'\n\nimport { ChainId } from '../enums'\n\nexport const NATIVE = {\n  [ChainId.MAINNET]: Ether.onChain(ChainId.MAINNET),\n  [ChainId.ROPSTEN]: Ether.onChain(ChainId.ROPSTEN),\n  [ChainId.RINKEBY]: Ether.onChain(ChainId.RINKEBY),\n  [ChainId.GÖRLI]: Ether.onChain(ChainId.GÖRLI),\n  [ChainId.KOVAN]: Ether.onChain(ChainId.KOVAN),\n  [ChainId.FANTOM]: Fantom.onChain(ChainId.FANTOM),\n  [ChainId.FANTOM_TESTNET]: Fantom.onChain(ChainId.FANTOM_TESTNET),\n  [ChainId.MATIC]: Matic.onChain(ChainId.MATIC),\n  [ChainId.MATIC_TESTNET]: Matic.onChain(ChainId.MATIC_TESTNET),\n  [ChainId.XDAI]: xDai.onChain(ChainId.XDAI),\n  [ChainId.BSC]: Binance.onChain(ChainId.BSC),\n  [ChainId.BSC_TESTNET]: Binance.onChain(ChainId.BSC_TESTNET),\n  // [ChainId.MOONBEAM_TESTNET]: Currency.GLMR,\n  [ChainId.ARBITRUM]: Ether.onChain(ChainId.ARBITRUM),\n  [ChainId.AVALANCHE]: Avalanche.onChain(ChainId.AVALANCHE),\n  [ChainId.AVALANCHE_TESTNET]: Avalanche.onChain(ChainId.AVALANCHE_TESTNET),\n  [ChainId.HECO]: Heco.onChain(ChainId.HECO),\n  [ChainId.HECO_TESTNET]: Heco.onChain(ChainId.HECO_TESTNET),\n  [ChainId.HARMONY]: Harmony.onChain(ChainId.HARMONY),\n  [ChainId.HARMONY_TESTNET]: Harmony.onChain(ChainId.HARMONY_TESTNET),\n  [ChainId.OKEX]: Okex.onChain(ChainId.OKEX),\n  [ChainId.OKEX_TESTNET]: Okex.onChain(ChainId.OKEX_TESTNET),\n  [ChainId.CELO]: Celo.onChain(ChainId.CELO),\n  [ChainId.PALM]: Palm.onChain(ChainId.PALM),\n  [ChainId.MOONRIVER]: Movr.onChain(ChainId.MOONRIVER),\n  [ChainId.FUSE]: Fuse.onChain(ChainId.FUSE),\n}\n","import JSBI from 'jsbi'\n\nexport const MaxUint256 = JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const TWO = JSBI.BigInt(2)\nexport const THREE = JSBI.BigInt(3)\nexport const FIVE = JSBI.BigInt(5)\nexport const TEN = JSBI.BigInt(10)\nexport const _100 = JSBI.BigInt(100)\nexport const _997 = JSBI.BigInt(997)\nexport const _1000 = JSBI.BigInt(1000)\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import _Big, { RoundingMode } from 'big.js'\n\nimport { BigintIsh } from '../types'\nimport JSBI from 'jsbi'\nimport { Rounding } from '../enums'\nimport _Decimal from 'decimal.js-light'\nimport invariant from 'tiny-invariant'\nimport toFormat from 'toformat'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nBig.strict = true\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP,\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp,\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = JSBI.BigInt(1)) {\n    this.numerator = JSBI.BigInt(numerator)\n    this.denominator = JSBI.BigInt(denominator)\n  }\n\n  private static tryParseFraction(fractionish: BigintIsh | Fraction): Fraction {\n    if (fractionish instanceof JSBI || typeof fractionish === 'number' || typeof fractionish === 'string')\n      return new Fraction(fractionish)\n\n    if ('numerator' in fractionish && 'denominator' in fractionish) return fractionish\n    throw new Error('Could not parse fraction')\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({\n      precision: significantDigits + 1,\n      rounding: toSignificantRounding[rounding],\n    })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n\n  /**\n   * Helper method for converting any super class back to a fraction\n   */\n  public get asFraction(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n}\n","import { BigintIsh } from '../types'\nimport { Currency } from './Currency'\nimport { Fraction } from './Fraction'\nimport JSBI from 'jsbi'\nimport { MaxUint256 } from '../constants'\nimport { Rounding } from '../enums'\nimport { Token } from './Token'\nimport _Big from 'big.js'\nimport invariant from 'tiny-invariant'\nimport toFormat from 'toformat'\n\nconst Big = toFormat(_Big)\n\nBig.strict = true\n\nexport class CurrencyAmount<T extends Currency> extends Fraction {\n  public readonly currency: T\n  public readonly decimalScale: JSBI\n\n  /**\n   * Returns a new currency amount instance from the unitless amount of token, i.e. the raw amount\n   * @param currency the currency in the amount\n   * @param rawAmount the raw token or ether amount\n   */\n  public static fromRawAmount<T extends Currency>(currency: T, rawAmount: BigintIsh): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, rawAmount)\n  }\n\n  /**\n   * Construct a currency amount with a denominator that is not equal to 1\n   * @param currency the currency\n   * @param numerator the numerator of the fractional token amount\n   * @param denominator the denominator of the fractional token amount\n   */\n  public static fromFractionalAmount<T extends Currency>(\n    currency: T,\n    numerator: BigintIsh,\n    denominator: BigintIsh\n  ): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, numerator, denominator)\n  }\n\n  protected constructor(currency: T, numerator: BigintIsh, denominator?: BigintIsh) {\n    super(numerator, denominator)\n    invariant(JSBI.lessThanOrEqual(this.quotient, MaxUint256), 'AMOUNT')\n    this.currency = currency\n    this.decimalScale = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(currency.decimals))\n  }\n\n  public add(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const added = super.add(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, added.numerator, added.denominator)\n  }\n\n  public subtract(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const subtracted = super.subtract(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, subtracted.numerator, subtracted.denominator)\n  }\n\n  public multiply(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const multiplied = super.multiply(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, multiplied.numerator, multiplied.denominator)\n  }\n\n  public divide(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const divided = super.divide(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, divided.numerator, divided.denominator)\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.divide(this.decimalScale).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.divide(this.decimalScale).toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.quotient.toString()).div(this.decimalScale.toString()).toFormat(format)\n  }\n\n  public get wrapped(): CurrencyAmount<Token> {\n    if (this.currency.isToken) return this as CurrencyAmount<Token>\n    return CurrencyAmount.fromFractionalAmount(this.currency.wrapped, this.numerator, this.denominator)\n  }\n}\n","import { BigintIsh } from '../types'\nimport { Currency } from './Currency'\nimport { CurrencyAmount } from './CurrencyAmount'\nimport { Fraction } from './Fraction'\nimport JSBI from 'jsbi'\nimport { Rounding } from '../enums'\nimport invariant from 'tiny-invariant'\n\nexport class Price<TBase extends Currency, TQuote extends Currency> extends Fraction {\n  public readonly baseCurrency: TBase // input i.e. denominator\n  public readonly quoteCurrency: TQuote // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  /**\n   * Construct a price, either with the base and quote currency amount, or the\n   * @param args\n   */\n  public constructor(\n    ...args:\n      | [TBase, TQuote, BigintIsh, BigintIsh]\n      | [\n          {\n            baseAmount: CurrencyAmount<TBase>\n            quoteAmount: CurrencyAmount<TQuote>\n          }\n        ]\n  ) {\n    let baseCurrency: TBase, quoteCurrency: TQuote, denominator: BigintIsh, numerator: BigintIsh\n\n    if (args.length === 4) {\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = args\n    } else {\n      const result = args[0].quoteAmount.divide(args[0].baseAmount)\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = [\n        args[0].baseAmount.currency,\n        args[0].quoteAmount.currency,\n        result.denominator,\n        result.numerator,\n      ]\n    }\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  /**\n   * Flip the price, switching the base and quote currency\n   */\n  public invert(): Price<TQuote, TBase> {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  /**\n   * Multiply the price by another price, returning a new price. The other price must have the same base currency as this price's quote currency\n   * @param other the other price\n   */\n  public multiply<TOtherQuote extends Currency>(other: Price<TQuote, TOtherQuote>): Price<TBase, TOtherQuote> {\n    invariant(this.quoteCurrency.equals(other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  /**\n   * Return the amount of quote currency corresponding to a given amount of the base currency\n   * @param currencyAmount the amount of base currency to quote against the price\n   */\n  public quote(currencyAmount: CurrencyAmount<TBase>): CurrencyAmount<TQuote> {\n    invariant(currencyAmount.currency.equals(this.baseCurrency), 'TOKEN')\n    const result = super.multiply(currencyAmount)\n    return CurrencyAmount.fromFractionalAmount(this.quoteCurrency, result.numerator, result.denominator)\n  }\n\n  /**\n   * Get the value scaled by decimals for formatting\n   * @private\n   */\n  private get adjustedForDecimals(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjustedForDecimals.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjustedForDecimals.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import { keccak256, pack } from '@ethersproject/solidity'\n\nimport { INIT_CODE_HASH } from '../constants'\nimport { Token } from '../entities'\nimport { getCreate2Address } from '@ethersproject/address'\n\nexport const computePairAddress = ({\n  factoryAddress,\n  tokenA,\n  tokenB,\n}: {\n  factoryAddress: string\n  tokenA: Token\n  tokenB: Token\n}): string => {\n  const [token0, token1] = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n  return getCreate2Address(\n    factoryAddress,\n    keccak256(['bytes'], [pack(['address', 'address'], [token0.address, token1.address])]),\n    INIT_CODE_HASH[token0.chainId]\n  )\n}\n","import { ONE, TWO, ZERO } from '../constants/numbers'\n\nimport JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nexport const MAX_SAFE_INTEGER = JSBI.BigInt(Number.MAX_SAFE_INTEGER)\n\n/**\n * Computes floor(sqrt(value))\n * @param value the value for which to compute the square root, rounded down\n */\nexport function sqrt(value: JSBI): JSBI {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), 'NEGATIVE')\n\n  // rely on built in sqrt if possible\n  if (JSBI.lessThan(value, MAX_SAFE_INTEGER)) {\n    return JSBI.BigInt(Math.floor(Math.sqrt(JSBI.toNumber(value))))\n  }\n\n  let z: JSBI\n  let x: JSBI\n  z = value\n  x = JSBI.add(JSBI.divide(value, TWO), ONE)\n  while (JSBI.lessThan(x, z)) {\n    z = x\n    x = JSBI.divide(JSBI.add(JSBI.divide(value, x), x), TWO)\n  }\n  return z\n}\n\n/**\n * Returns the smallest member of the array\n * @param values the values from which the smallest gets returned\n * @returns the smallest memmber of the array\n */\nexport function minimum(...values: JSBI[]): JSBI {\n  let lowest = values[0]\n  for (let i = 1; i < values.length; i++) {\n    const value = values[i]\n    if (JSBI.LT(value, lowest)) {\n      lowest = value\n    }\n  }\n  return lowest\n}\n\n/**\n * Returns the biggest member of the array\n * @param values the values from which the biggest gets returned\n * @returns the biggest memmber of the array\n */\nexport function maximum(...values: JSBI[]): JSBI {\n  let highest = values[0]\n  for (let i = 1; i < values.length; i++) {\n    const value = values[i]\n    if (JSBI.GT(value, highest)) {\n      highest = value\n    }\n  }\n  return highest\n}\n\nexport function difference(a: JSBI, b: JSBI): JSBI {\n  if (JSBI.greaterThan(a, b)) {\n    return JSBI.subtract(a, b)\n  }\n  return JSBI.subtract(b, a)\n}\n","import { FACTORY_ADDRESS, FIVE, MINIMUM_LIQUIDITY, ONE, ZERO, _1000, _997 } from '../constants'\nimport { InsufficientInputAmountError, InsufficientReservesError } from '../errors'\n\nimport { BigintIsh } from '../types'\nimport { CurrencyAmount } from './CurrencyAmount'\nimport JSBI from 'jsbi'\nimport { Price } from './Price'\nimport { Token } from './Token'\nimport { computePairAddress } from '../functions/computePairAddress'\nimport invariant from 'tiny-invariant'\nimport { sqrt } from '../functions/math'\n\nexport class Pair {\n  public readonly liquidityToken: Token\n  private readonly tokenAmounts: [CurrencyAmount<Token>, CurrencyAmount<Token>]\n\n  public static getAddress(tokenA: Token, tokenB: Token): string {\n    return computePairAddress({\n      factoryAddress: FACTORY_ADDRESS[tokenA.chainId],\n      tokenA,\n      tokenB,\n    })\n  }\n\n  public constructor(currencyAmountA: CurrencyAmount<Token>, currencyAmountB: CurrencyAmount<Token>) {\n    const currencyAmounts = currencyAmountA.currency.sortsBefore(currencyAmountB.currency) // does safety checks\n      ? [currencyAmountA, currencyAmountB]\n      : [currencyAmountB, currencyAmountA]\n    this.liquidityToken = new Token(\n      currencyAmounts[0].currency.chainId,\n      Pair.getAddress(currencyAmounts[0].currency, currencyAmounts[1].currency),\n      18,\n      'UNI-V2',\n      'Uniswap V2'\n    )\n    this.tokenAmounts = currencyAmounts as [CurrencyAmount<Token>, CurrencyAmount<Token>]\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price<Token, Token> {\n    const result = this.tokenAmounts[1].divide(this.tokenAmounts[0])\n    return new Price(this.token0, this.token1, result.denominator, result.numerator)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price<Token, Token> {\n    const result = this.tokenAmounts[0].divide(this.tokenAmounts[1])\n    return new Price(this.token1, this.token0, result.denominator, result.numerator)\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price<Token, Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): number {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].currency\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].currency\n  }\n\n  public get reserve0(): CurrencyAmount<Token> {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): CurrencyAmount<Token> {\n    return this.tokenAmounts[1]\n  }\n\n  public reserveOf(token: Token): CurrencyAmount<Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  public getOutputAmount(inputAmount: CurrencyAmount<Token>): [CurrencyAmount<Token>, Pair] {\n    invariant(this.involvesToken(inputAmount.currency), 'TOKEN')\n    if (JSBI.equal(this.reserve0.quotient, ZERO) || JSBI.equal(this.reserve1.quotient, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.currency)\n    const outputReserve = this.reserveOf(inputAmount.currency.equals(this.token0) ? this.token1 : this.token0)\n    const inputAmountWithFee = JSBI.multiply(inputAmount.quotient, _997)\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.quotient)\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.quotient, _1000), inputAmountWithFee)\n    const outputAmount = CurrencyAmount.fromRawAmount(\n      inputAmount.currency.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator)\n    )\n    if (JSBI.equal(outputAmount.quotient, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getInputAmount(outputAmount: CurrencyAmount<Token>): [CurrencyAmount<Token>, Pair] {\n    invariant(this.involvesToken(outputAmount.currency), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.quotient, ZERO) ||\n      JSBI.equal(this.reserve1.quotient, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.quotient, this.reserveOf(outputAmount.currency).quotient)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.currency)\n    const inputReserve = this.reserveOf(outputAmount.currency.equals(this.token0) ? this.token1 : this.token0)\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.quotient, outputAmount.quotient), _1000)\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.quotient, outputAmount.quotient), _997)\n    const inputAmount = CurrencyAmount.fromRawAmount(\n      outputAmount.currency.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\n    )\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getLiquidityMinted(\n    totalSupply: CurrencyAmount<Token>,\n    tokenAmountA: CurrencyAmount<Token>,\n    tokenAmountB: CurrencyAmount<Token>\n  ): CurrencyAmount<Token> {\n    invariant(totalSupply.currency.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.currency.sortsBefore(tokenAmountB.currency) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].currency.equals(this.token0) && tokenAmounts[1].currency.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.quotient, ZERO)) {\n      liquidity = JSBI.subtract(\n        sqrt(JSBI.multiply(tokenAmounts[0].quotient, tokenAmounts[1].quotient)),\n        MINIMUM_LIQUIDITY\n      )\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].quotient, totalSupply.quotient), this.reserve0.quotient)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].quotient, totalSupply.quotient), this.reserve1.quotient)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n\n      console.log({\n        amount0: amount0.toString(),\n        amount1: amount1.toString(),\n        liquidity: liquidity.toString(),\n        totalSupply: totalSupply.quotient.toString(),\n        kLast: sqrt(JSBI.multiply(this.tokenAmounts[0].quotient, this.tokenAmounts[1].quotient)),\n      })\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n\n    return CurrencyAmount.fromRawAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: CurrencyAmount<Token>,\n    liquidity: CurrencyAmount<Token>,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): CurrencyAmount<Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.currency.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.currency.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.quotient, totalSupply.quotient), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: CurrencyAmount<Token>\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = JSBI.BigInt(kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.reserve0.quotient, this.reserve1.quotient))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.quotient, JSBI.subtract(rootK, rootKLast))\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(CurrencyAmount.fromRawAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return CurrencyAmount.fromRawAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.quotient, this.reserveOf(token).quotient), totalSupplyAdjusted.quotient)\n    )\n  }\n}\n","import { BigintIsh } from '../types'\nimport { Fraction } from './Fraction'\nimport JSBI from 'jsbi'\nimport { Rounding } from '../enums'\n\nconst ONE_HUNDRED = new Fraction(JSBI.BigInt(100))\n\n/**\n * Converts a fraction to a percent\n * @param fraction the fraction to convert\n */\nfunction toPercent(fraction: Fraction): Percent {\n  return new Percent(fraction.numerator, fraction.denominator)\n}\n\nexport class Percent extends Fraction {\n  /**\n   * This boolean prevents a fraction from being interpreted as a Percent\n   */\n  public readonly isPercent: true = true\n\n  add(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.add(other))\n  }\n\n  subtract(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.subtract(other))\n  }\n\n  multiply(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.multiply(other))\n  }\n\n  divide(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.divide(other))\n  }\n\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return super.multiply(ONE_HUNDRED).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return super.multiply(ONE_HUNDRED).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import { Currency } from './Currency'\nimport { Pair } from './Pair'\nimport { Price } from './Price'\nimport { Token } from './Token'\nimport invariant from 'tiny-invariant'\n\nexport class Route<TInput extends Currency, TOutput extends Currency> {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly input: TInput\n  public readonly output: TOutput\n\n  public constructor(pairs: Pair[], input: TInput, output: TOutput) {\n    invariant(pairs.length > 0, 'PAIRS')\n    const chainId: number = pairs[0].chainId\n    invariant(\n      pairs.every((pair) => pair.chainId === chainId),\n      'CHAIN_IDS'\n    )\n\n    const wrappedInput = input.wrapped\n    invariant(pairs[0].involvesToken(wrappedInput), 'INPUT')\n    invariant(typeof output === 'undefined' || pairs[pairs.length - 1].involvesToken(output.wrapped), 'OUTPUT')\n\n    const path: Token[] = [wrappedInput]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n\n    this.pairs = pairs\n    this.path = path\n    this.input = input\n    this.output = output\n  }\n\n  private _midPrice: Price<TInput, TOutput> | null = null\n\n  public get midPrice(): Price<TInput, TOutput> {\n    if (this._midPrice !== null) return this._midPrice\n    const prices: Price<Currency, Currency>[] = []\n    for (const [i, pair] of this.pairs.entries()) {\n      prices.push(\n        this.path[i].equals(pair.token0)\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.quotient, pair.reserve1.quotient)\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.quotient, pair.reserve0.quotient)\n      )\n    }\n    const reduced = prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n    return (this._midPrice = new Price(this.input, this.output, reduced.denominator, reduced.numerator))\n  }\n\n  public get chainId(): number {\n    return this.pairs[0].chainId\n  }\n}\n","import { Currency, CurrencyAmount, Percent, Price } from '../entities'\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nexport function computePriceImpact<TBase extends Currency, TQuote extends Currency>(\n  midPrice: Price<TBase, TQuote>,\n  inputAmount: CurrencyAmount<TBase>,\n  outputAmount: CurrencyAmount<TQuote>\n): Percent {\n  const quotedOutputAmount = midPrice.quote(inputAmount)\n  // calculate price impact := (exactQuote - outputAmount) / exactQuote\n  const priceImpact = quotedOutputAmount.subtract(outputAmount).divide(quotedOutputAmount)\n  return new Percent(priceImpact.numerator, priceImpact.denominator)\n}\n","import invariant from 'tiny-invariant'\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n","import { ONE, ZERO } from '../constants'\n\nimport { Currency } from './Currency'\nimport { CurrencyAmount } from './CurrencyAmount'\nimport { Fraction } from './Fraction'\nimport { Pair } from './Pair'\nimport { Percent } from './Percent'\nimport { Price } from './Price'\nimport { Route } from './Route'\nimport { Token } from './Token'\nimport { TradeType } from '../enums'\nimport { computePriceImpact } from '../functions/computePriceImpact'\nimport invariant from 'tiny-invariant'\nimport { sortedInsert } from '../functions/sortedInsert'\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput<TInput extends Currency, TOutput extends Currency> {\n  readonly inputAmount: CurrencyAmount<TInput>\n  readonly outputAmount: CurrencyAmount<TOutput>\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator<TInput extends Currency, TOutput extends Currency>(\n  a: InputOutput<TInput, TOutput>,\n  b: InputOutput<TInput, TOutput>\n): number {\n  // must have same input and output token for comparison\n  invariant(a.inputAmount.currency.equals(b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(a.outputAmount.currency.equals(b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType>(\n  a: Trade<TInput, TOutput, TTradeType>,\n  b: Trade<TInput, TOutput, TTradeType>\n) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType> {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through and the input/output currencies.\n   */\n  public readonly route: Route<TInput, TOutput>\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TTradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount<TInput>\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount<TOutput>\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price<TInput, TOutput>\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn<TInput extends Currency, TOutput extends Currency>(\n    route: Route<TInput, TOutput>,\n    amountIn: CurrencyAmount<TInput>\n  ): Trade<TInput, TOutput, TradeType.EXACT_INPUT> {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut<TInput extends Currency, TOutput extends Currency>(\n    route: Route<TInput, TOutput>,\n    amountOut: CurrencyAmount<TOutput>\n  ): Trade<TInput, TOutput, TradeType.EXACT_OUTPUT> {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  public constructor(\n    route: Route<TInput, TOutput>,\n    amount: TTradeType extends TradeType.EXACT_INPUT ? CurrencyAmount<TInput> : CurrencyAmount<TOutput>,\n    tradeType: TTradeType\n  ) {\n    this.route = route\n    this.tradeType = tradeType\n\n    const tokenAmounts: CurrencyAmount<Token>[] = new Array(route.path.length)\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(amount.currency.equals(route.input), 'INPUT')\n      tokenAmounts[0] = amount.wrapped\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount] = pair.getOutputAmount(tokenAmounts[i])\n        tokenAmounts[i + 1] = outputAmount\n      }\n      this.inputAmount = CurrencyAmount.fromFractionalAmount(route.input, amount.numerator, amount.denominator)\n      this.outputAmount = CurrencyAmount.fromFractionalAmount(\n        route.output,\n        tokenAmounts[tokenAmounts.length - 1].numerator,\n        tokenAmounts[tokenAmounts.length - 1].denominator\n      )\n    } else {\n      invariant(amount.currency.equals(route.output), 'OUTPUT')\n      tokenAmounts[tokenAmounts.length - 1] = amount.wrapped\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount] = pair.getInputAmount(tokenAmounts[i])\n        tokenAmounts[i - 1] = inputAmount\n      }\n      this.inputAmount = CurrencyAmount.fromFractionalAmount(\n        route.input,\n        tokenAmounts[0].numerator,\n        tokenAmounts[0].denominator\n      )\n      this.outputAmount = CurrencyAmount.fromFractionalAmount(route.output, amount.numerator, amount.denominator)\n    }\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.quotient,\n      this.outputAmount.quotient\n    )\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount<TOutput> {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.quotient).quotient\n      return CurrencyAmount.fromRawAmount(this.outputAmount.currency, slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount<TInput> {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE)\n        .add(slippageTolerance)\n        .multiply(this.inputAmount.quotient).quotient\n      return CurrencyAmount.fromRawAmount(this.inputAmount.currency, slippageAdjustedAmountIn)\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param nextAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param currencyAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactIn<TInput extends Currency, TOutput extends Currency>(\n    pairs: Pair[],\n    currencyAmountIn: CurrencyAmount<TInput>,\n    currencyOut: TOutput,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    nextAmountIn: CurrencyAmount<Currency> = currencyAmountIn,\n    bestTrades: Trade<TInput, TOutput, TradeType.EXACT_INPUT>[] = []\n  ): Trade<TInput, TOutput, TradeType.EXACT_INPUT>[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(currencyAmountIn === nextAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n\n    const amountIn = nextAmountIn.wrapped\n    const tokenOut = currencyOut.wrapped\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.currency) && !pair.token1.equals(amountIn.currency)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: CurrencyAmount<Token>\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.currency.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([...currentPairs, pair], currencyAmountIn.currency, currencyOut),\n            currencyAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          currencyAmountIn,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1,\n          },\n          [...currentPairs, pair],\n          amountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * Return the execution price after accounting for slippage tolerance\n   * @param slippageTolerance the allowed tolerated slippage\n   */\n  public worstExecutionPrice(slippageTolerance: Percent): Price<TInput, TOutput> {\n    return new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.maximumAmountIn(slippageTolerance).quotient,\n      this.minimumAmountOut(slippageTolerance).quotient\n    )\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param nextAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param currencyAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOut<TInput extends Currency, TOutput extends Currency>(\n    pairs: Pair[],\n    currencyIn: TInput,\n    currencyAmountOut: CurrencyAmount<TOutput>,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    nextAmountOut: CurrencyAmount<Currency> = currencyAmountOut,\n    bestTrades: Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[] = []\n  ): Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(currencyAmountOut === nextAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n\n    const amountOut = nextAmountOut.wrapped\n    const tokenIn = currencyIn.wrapped\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.currency) && !pair.token1.equals(amountOut.currency)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: CurrencyAmount<Token>\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if (error.isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.currency.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([pair, ...currentPairs], currencyIn, currencyAmountOut.currency),\n            currencyAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          currencyIn,\n          currencyAmountOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1,\n          },\n          [pair, ...currentPairs],\n          amountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n","import { JsonRpcSigner, Web3Provider } from '@ethersproject/providers'\n\n// account is not optional\nexport function getSigner(library: Web3Provider, account: string): JsonRpcSigner {\n  return library.getSigner(account).connectUnchecked()\n}\n\n// account is optional\nexport function getProviderOrSigner(library: Web3Provider, account?: string): Web3Provider | JsonRpcSigner {\n  return account ? getSigner(library, account) : library\n}\n","import { Currency } from './entities/Currency'\nimport { CurrencyAmount } from './entities/CurrencyAmount'\nimport { Percent } from './entities/Percent'\nimport { Token } from './entities/Token'\nimport { Trade } from './entities/Trade'\nimport { TradeType } from './enums/TradeType'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from './functions/validateAndParseAddress'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n}\n\nexport interface TradeOptionsDeadline extends Omit<TradeOptions, 'ttl'> {\n  /**\n   * When the transaction expires.\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\n   */\n  deadline: number\n}\n\n/**\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\n */\nexport interface SwapParameters {\n  /**\n   * The method to call on the Uniswap V2 Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nexport function toHex(currencyAmount: CurrencyAmount<Currency>) {\n  return `0x${currencyAmount.quotient.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(\n    trade: Trade<Currency, Currency, TradeType>,\n    options: TradeOptions | TradeOptionsDeadline\n  ): SwapParameters {\n    const etherIn = trade.inputAmount.currency.isNative\n    const etherOut = trade.outputAmount.currency.isNative\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n    const path: string[] = trade.route.path.map((token: Token) => token.address)\n    const deadline =\n      'ttl' in options\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n        : `0x${options.deadline.toString(16)}`\n\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n\n    let methodName: string\n    let args: (string | string[])[]\n    let value: string\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = useFeeOnTransfer\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n            : 'swapExactTokensForTokens'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        if (etherIn) {\n          methodName = 'swapETHForExactTokens'\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETH'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = 'swapTokensForExactTokens'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n    }\n    return {\n      methodName,\n      args,\n      value,\n    }\n  }\n}\n","import JSBI from 'jsbi'\n\nimport { ONE, ZERO } from '../constants'\nimport { Rebase } from '../interfaces'\n\nexport function rebase(value: JSBI, from: JSBI, to: JSBI): JSBI {\n  return from ? JSBI.divide(JSBI.multiply(value, to), from) : ZERO\n}\n\nexport function toElastic(total: Rebase, base: JSBI, roundUp: boolean): JSBI {\n  let elastic: JSBI\n  if (JSBI.equal(total.base, ZERO)) {\n    elastic = base\n  } else {\n    elastic = JSBI.divide(JSBI.multiply(base, total.elastic), total.base)\n    if (roundUp && JSBI.lessThan(JSBI.divide(JSBI.multiply(elastic, total.base), total.elastic), base)) {\n      elastic = JSBI.add(elastic, ONE)\n    }\n  }\n\n  return elastic\n}\n","import { SOLIDITY_TYPE_MAXIMA, SolidityType, ZERO } from '../constants'\n\nimport JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\n}\n"],"names":["ChainId","Rounding","TradeType","ChainKey","USDC_ADDRESS","MAINNET","ROPSTEN","KOVAN","MATIC","FANTOM","BSC","HARMONY","HECO","OKEX","XDAI","ARBITRUM","AVALANCHE","FACTORY_ADDRESS","RINKEBY","GÖRLI","FANTOM_TESTNET","MATIC_TESTNET","BSC_TESTNET","ARBITRUM_TESTNET","MOONBEAM_TESTNET","AVALANCHE_TESTNET","HECO_TESTNET","HARMONY_TESTNET","OKEX_TESTNET","CELO","PALM","PALM_TESTNET","MOONRIVER","FUSE","ROUTER_ADDRESS","SUSHI_ADDRESS","MASTERCHEF_ADDRESS","BAR_ADDRESS","MAKER_ADDRESS","TIMELOCK_ADDRESS","BENTOBOX_ADDRESS","KASHI_ADDRESS","SUSHISWAP_SWAPPER_ADDRESS","SUSHISWAP_MULTISWAPPER_ADDRESS","SUSHISWAP_MULTI_EXACT_SWAPPER_ADDRESS","CHAINLINK_ORACLE_ADDRESS","BORING_HELPER_ADDRESS","ARCHER_ROUTER_ADDRESS","MINICHEF_ADDRESS","WETH9_ADDRESS","WNATIVE_ADDRESS","MASTERCHEF_V2_ADDRESS","ENS_REGISTRAR_ADDRESS","ZAPPER_ADDRESS","MERKLE_DISTRIBUTOR_ADDRESS","MULTICALL2_ADDRESS","AbstractCurrency","chainId","decimals","symbol","name","Number","isSafeInteger","invariant","isInteger","NativeCurrency","validateAndParseAddress","address","getAddress","error","Token","equals","other","isToken","this","sortsBefore","toLowerCase","USDC","WETH9","WNATIVE","Avalanche","_NativeCurrency","onChain","_cache","isNative","wnative","Binance","Celo","wcelo","Ether","_etherCache","weth9","Fantom","Harmony","Heco","Matic","Movr","Okex","xDai","Palm","Fuse","SolidityType","NATIVE","MaxUint256","JSBI","BigInt","ZERO","ONE","TWO","THREE","FIVE","TEN","_100","_997","_1000","CHAIN_KEY","INIT_CODE_HASH","MINIMUM_LIQUIDITY","SOLIDITY_TYPE_MAXIMA","uint8","uint256","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","_this","constructor","setPrototypeOf","prototype","Error","InsufficientInputAmountError","_this2","Decimal","toFormat","_Decimal","Big","_Big","strict","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","numerator","denominator","tryParseFraction","fractionish","invert","add","otherParsed","equal","multiply","subtract","lessThan","equalTo","greaterThan","divide","toSignificant","significantDigits","format","rounding","groupSeparator","set","precision","quotient","toString","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","remainder","CurrencyAmount","currency","lessThanOrEqual","decimalScale","exponentiate","fromRawAmount","rawAmount","fromFractionalAmount","added","subtracted","multiplied","divided","_Fraction","toExact","wrapped","Price","baseCurrency","quoteCurrency","args","length","result","quoteAmount","baseAmount","scalar","fraction","quote","currencyAmount","adjustedForDecimals","computePairAddress","factoryAddress","tokenA","tokenB","token0","getCreate2Address","keccak256","pack","MAX_SAFE_INTEGER","sqrt","value","greaterThanOrEqual","Math","floor","toNumber","z","x","Pair","currencyAmountA","currencyAmountB","currencyAmounts","liquidityToken","tokenAmounts","involvesToken","token","token1","priceOf","token0Price","token1Price","reserveOf","reserve0","reserve1","getOutputAmount","inputAmount","inputReserve","outputReserve","inputAmountWithFee","outputAmount","getInputAmount","getLiquidityMinted","totalSupply","tokenAmountA","tokenAmountB","liquidity","amount0","amount1","console","log","kLast","getLiquidityValue","feeOn","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","ONE_HUNDRED","toPercent","Percent","Route","pairs","input","output","every","pair","wrappedInput","path","entries","currentInput","push","_midPrice","prices","reduced","slice","reduce","accumulator","currentValue","computePriceImpact","midPrice","quotedOutputAmount","priceImpact","sortedInsert","items","maxSize","comparator","isFull","lo","hi","mid","splice","pop","inputOutputComparator","a","b","tradeComparator","ioComp","route","Trade","amount","tradeType","Array","EXACT_INPUT","i","executionPrice","exactIn","amountIn","exactOut","amountOut","EXACT_OUTPUT","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","currentPairs","nextAmountIn","bestTrades","maxNumResults","maxHops","tokenOut","isInsufficientInputAmountError","pairsExcludingThisPair","concat","worstExecutionPrice","bestTradeExactOut","currencyIn","currencyAmountOut","nextAmountOut","tokenIn","isInsufficientReservesError","getSigner","library","account","connectUnchecked","toHex","Router","swapCallParameters","trade","options","etherIn","etherOut","ttl","methodName","to","recipient","allowedSlippage","map","deadline","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer","currencyA","currencyB","highest","arguments","GT","lowest","LT","from","total","base","roundUp","elastic","solidityType"],"mappings":"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"}