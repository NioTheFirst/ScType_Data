import { BigNumber } from "@ethersproject/bignumber";
export interface RToken {
    name: string;
    address: string;
}
export declare abstract class RPool {
    readonly address: string;
    readonly token0: RToken;
    readonly token1: RToken;
    readonly fee: number;
    reserve0: BigNumber;
    reserve1: BigNumber;
    readonly minLiquidity: number;
    readonly swapGasCost: number;
    constructor(address: string, token0: RToken, token1: RToken, fee: number, reserve0: BigNumber, reserve1: BigNumber, minLiquidity?: number, swapGasCost?: number);
    abstract calcOutByIn(amountIn: number, direction: boolean): [number, number];
    abstract calcInByOut(amountOut: number, direction: boolean): [number, number];
    abstract calcPrice(amountIn: number, direction: boolean, takeFeeIntoAccount: boolean): number;
    abstract calcInputByPrice(price: number, direction: boolean, takeFeeIntoAccount: boolean, hint: number): number;
}
export declare class ConstantProductRPool extends RPool {
    constructor(address: string, token0: RToken, token1: RToken, fee: number, reserve0: BigNumber, reserve1: BigNumber);
    calcOutByIn(amountIn: number, direction: boolean): [number, number];
    calcInByOut(amountOut: number, direction: boolean): [number, number];
    calcPrice(amountIn: number, direction: boolean, takeFeeIntoAccount: boolean): number;
    calcInputByPrice(price: number, direction: boolean, takeFeeIntoAccount: boolean): number;
}
export declare class HybridRPool extends RPool {
    readonly A: number;
    readonly A_PRECISION = 100;
    D: BigNumber;
    constructor(address: string, token0: RToken, token1: RToken, fee: number, A: number, reserve0: BigNumber, reserve1: BigNumber);
    computeLiquidity(): BigNumber;
    computeY(x: BigNumber): BigNumber;
    calcOutByIn(amountIn: number, direction: boolean): [number, number];
    calcInByOut(amountOut: number, direction: boolean): [number, number];
    calcPrice(amountIn: number, direction: boolean, takeFeeIntoAccount: boolean): number;
    calcInputByPrice(price: number, direction: boolean, takeFeeIntoAccount: boolean, hint?: number): number;
}
