{"version":3,"file":"core-sdk.esm.js","sources":["../src/enums/ChainId.ts","../src/enums/ChainKey.ts","../src/enums/Rounding.ts","../src/enums/TradeType.ts","../src/constants/addresses.ts","../src/entities/AbstractCurrency.ts","../src/entities/NativeCurrency.ts","../src/functions/validateAndParseAddress.ts","../src/entities/Token.ts","../src/constants/tokens.ts","../src/entities/Native/Avalanche.ts","../src/entities/Native/Binance.ts","../src/entities/Native/Celo.ts","../src/entities/Native/Ether.ts","../src/entities/Native/Fantom.ts","../src/entities/Native/Harmony.ts","../src/entities/Native/Heco.ts","../src/entities/Native/Matic.ts","../src/entities/Native/Movr.ts","../src/entities/Native/Okex.ts","../src/entities/Native/xDai.ts","../src/entities/Native/Palm.ts","../src/entities/Native/Fuse.ts","../src/constants/natives.ts","../src/constants/numbers.ts","../src/constants/index.ts","../src/errors.ts","../src/entities/Fraction.ts","../src/entities/CurrencyAmount.ts","../src/entities/Price.ts","../src/functions/computePairAddress.ts","../src/functions/math.ts","../src/entities/Pair.ts","../src/entities/Percent.ts","../src/entities/Route.ts","../src/functions/computePriceImpact.ts","../src/functions/sortedInsert.ts","../src/entities/Trade.ts","../src/functions/contract.ts","../src/functions/rebase.ts","../src/functions/validateSolidityTypeInstance.ts","../src/router.ts"],"sourcesContent":["export enum ChainId {\n  MAINNET = 1,\n  ROPSTEN = 3,\n  RINKEBY = 4,\n  GÖRLI = 5,\n  KOVAN = 42,\n  MATIC = 137,\n  MATIC_TESTNET = 80001,\n  FANTOM = 250,\n  FANTOM_TESTNET = 4002,\n  XDAI = 100,\n  BSC = 56,\n  BSC_TESTNET = 97,\n  ARBITRUM = 42161,\n  ARBITRUM_TESTNET = 79377087078960,\n  MOONBEAM_TESTNET = 1287,\n  AVALANCHE = 43114,\n  AVALANCHE_TESTNET = 43113,\n  HECO = 128,\n  HECO_TESTNET = 256,\n  HARMONY = 1666600000,\n  HARMONY_TESTNET = 1666700000,\n  OKEX = 66,\n  OKEX_TESTNET = 65,\n  CELO = 42220,\n  PALM = 11297108109,\n  PALM_TESTNET = 11297108099,\n  MOONRIVER = 1285,\n  FUSE = 122,\n}\n","export enum ChainKey {\n  KOVAN = 'kovan',\n}\n","export enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP,\n}\n","export enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT,\n}\n","import { AddressMap } from '../types'\nimport { ChainId } from '../enums'\n\nexport const USDC_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48',\n  [ChainId.ROPSTEN]: '0x0D9C8723B343A8368BebE0B5E89273fF8D712e3C',\n  [ChainId.KOVAN]: '0xb7a4F3E9097C08dA09517b5aB877F7a917224ede',\n  [ChainId.MATIC]: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',\n  [ChainId.FANTOM]: '0x04068DA6C83AFCFA0e13ba15A6696662335D5B75',\n  [ChainId.BSC]: '0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d',\n  [ChainId.HARMONY]: '0x985458E523dB3d53125813eD68c274899e9DfAb4',\n  [ChainId.HECO]: '0x9362Bbef4B8313A8Aa9f0c9808B80577Aa26B73B',\n  [ChainId.OKEX]: '0xc946DAf81b08146B1C7A8Da2A851Ddf2B3EAaf85',\n  [ChainId.XDAI]: '0xDDAfbb505ad214D7b80b1f830fcCc89B60fb7A83',\n  [ChainId.ARBITRUM]: '0xFF970A61A04b1cA14834A43f5dE4533eBDDB5CC8',\n  [ChainId.AVALANCHE]: '0xA7D7079b0FEaD91F3e65f86E8915Cb59c1a4C664',\n}\n\nexport const FACTORY_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0xC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac',\n  [ChainId.ROPSTEN]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.RINKEBY]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.GÖRLI]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.KOVAN]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.FANTOM]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.FANTOM_TESTNET]: '',\n  [ChainId.MATIC]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.MATIC_TESTNET]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.XDAI]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.BSC]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.BSC_TESTNET]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.ARBITRUM]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.ARBITRUM_TESTNET]: '',\n  [ChainId.MOONBEAM_TESTNET]: '0x2Ce3F07dD4c62b56a502E223A7cBE38b1d77A1b5',\n  [ChainId.AVALANCHE]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.AVALANCHE_TESTNET]: '0xd00ae08403B9bbb9124bB305C09058E32C39A48c',\n  [ChainId.HECO]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.HECO_TESTNET]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.HARMONY]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.HARMONY_TESTNET]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.OKEX]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.OKEX_TESTNET]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.CELO]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.PALM]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.PALM_TESTNET]: '',\n  [ChainId.MOONRIVER]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.FUSE]: '0x43eA90e2b786728520e4f930d2A71a477BF2737C',\n}\n\nexport const ROUTER_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F',\n  [ChainId.RINKEBY]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.ROPSTEN]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.GÖRLI]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.KOVAN]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.FANTOM]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.FANTOM_TESTNET]: '',\n  [ChainId.MATIC]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.MATIC_TESTNET]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.XDAI]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.BSC]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.BSC_TESTNET]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.ARBITRUM]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.ARBITRUM_TESTNET]: '',\n  [ChainId.MOONBEAM_TESTNET]: '0xeB5c2BB5E83B51d83F3534Ae21E84336B8B376ef',\n  [ChainId.AVALANCHE]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.AVALANCHE_TESTNET]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.HECO]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.HECO_TESTNET]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.HARMONY]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.HARMONY_TESTNET]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.OKEX]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.OKEX_TESTNET]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.CELO]: '0x1421bDe4B10e8dd459b3BCb598810B1337D56842',\n  [ChainId.PALM]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.PALM_TESTNET]: '',\n  [ChainId.MOONRIVER]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.FUSE]: '0xF4d73326C13a4Fc5FD7A064217e12780e9Bd62c3',\n}\n\nexport const SUSHI_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0x6B3595068778DD592e39A122f4f5a5cF09C90fE2',\n  [ChainId.ROPSTEN]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\n  [ChainId.RINKEBY]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\n  [ChainId.GÖRLI]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\n  [ChainId.KOVAN]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\n  [ChainId.FANTOM]: '0xae75A438b2E0cB8Bb01Ec1E1e376De11D44477CC',\n  [ChainId.MATIC]: '0x0b3F868E0BE5597D5DB7fEB59E1CADBb0fdDa50a',\n  [ChainId.XDAI]: '0x2995D1317DcD4f0aB89f4AE60F3f020A4F17C7CE',\n  [ChainId.BSC]: '0x947950BcC74888a40Ffa2593C5798F11Fc9124C4',\n  [ChainId.ARBITRUM]: '0xd4d42F0b6DEF4CE0383636770eF773390d85c61A',\n  [ChainId.AVALANCHE]: '0x39cf1BD5f15fb22eC3D9Ff86b0727aFc203427cc',\n  [ChainId.HECO]: '0x52E00B2dA5Bd7940fFe26B609A42F957f31118D5',\n  [ChainId.HARMONY]: '0xBEC775Cb42AbFa4288dE81F387a9b1A3c4Bc552A',\n  [ChainId.OKEX]: '0x2218E0D5E0173769F5b4939a3aE423f7e5E4EAB7',\n  [ChainId.OKEX_TESTNET]: '',\n  [ChainId.CELO]: '0xD15EC721C2A896512Ad29C671997DD68f9593226',\n  [ChainId.PALM]: '',\n  [ChainId.PALM_TESTNET]: '',\n}\n\nexport const MASTERCHEF_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0xc2EdaD668740f1aA35E4D8f227fB8E17dcA888Cd',\n  [ChainId.ROPSTEN]: '0x80C7DD17B01855a6D2347444a0FCC36136a314de',\n  [ChainId.RINKEBY]: '0x80C7DD17B01855a6D2347444a0FCC36136a314de',\n  [ChainId.GÖRLI]: '0x80C7DD17B01855a6D2347444a0FCC36136a314de',\n  [ChainId.KOVAN]: '0x80C7DD17B01855a6D2347444a0FCC36136a314de',\n}\n\nexport const BAR_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0x8798249c2E607446EfB7Ad49eC89dD1865Ff4272',\n  [ChainId.ROPSTEN]: '0x1be211D8DA40BC0ae8719c6663307Bfc987b1d6c',\n  [ChainId.RINKEBY]: '0x1be211D8DA40BC0ae8719c6663307Bfc987b1d6c',\n  [ChainId.GÖRLI]: '0x1be211D8DA40BC0ae8719c6663307Bfc987b1d6c',\n  [ChainId.KOVAN]: '0x1be211D8DA40BC0ae8719c6663307Bfc987b1d6c',\n}\n\nexport const MAKER_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0xE11fc0B43ab98Eb91e9836129d1ee7c3Bc95df50',\n  [ChainId.ROPSTEN]: '0x1b9d177CcdeA3c79B6c8F40761fc8Dc9d0500EAa',\n  [ChainId.RINKEBY]: '0x1b9d177CcdeA3c79B6c8F40761fc8Dc9d0500EAa',\n  [ChainId.GÖRLI]: '0x1b9d177CcdeA3c79B6c8F40761fc8Dc9d0500EAa',\n  [ChainId.KOVAN]: '0x1b9d177CcdeA3c79B6c8F40761fc8Dc9d0500EAa',\n}\n\nexport const TIMELOCK_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0x9a8541Ddf3a932a9A922B607e9CF7301f1d47bD1',\n}\n\nexport const BENTOBOX_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\n  [ChainId.ROPSTEN]: '0x6BdD85290001C8Aef74f35A7606065FA15aD5ACF',\n  [ChainId.RINKEBY]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\n  [ChainId.GÖRLI]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\n  [ChainId.KOVAN]: '0xc381a85ed7C7448Da073b7d6C9d4cBf1Cbf576f0',\n  [ChainId.FANTOM]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\n  [ChainId.MATIC]: '0x0319000133d3AdA02600f0875d2cf03D442C3367',\n  [ChainId.MATIC_TESTNET]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\n  [ChainId.XDAI]: '0xE2d7F5dd869Fc7c126D21b13a9080e75a4bDb324',\n  [ChainId.BSC]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\n  [ChainId.BSC_TESTNET]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\n  [ChainId.ARBITRUM]: '0x74c764D41B77DBbb4fe771daB1939B00b146894A',\n  [ChainId.AVALANCHE]: '0x0711B6026068f736bae6B213031fCE978D48E026',\n  [ChainId.HECO]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\n}\n\nexport const KASHI_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0x2cBA6Ab6574646Badc84F0544d05059e57a5dc42',\n  [ChainId.KOVAN]: '0x2cBA6Ab6574646Badc84F0544d05059e57a5dc42',\n  [ChainId.MATIC]: '0xB527C5295c4Bc348cBb3a2E96B2494fD292075a7',\n  [ChainId.XDAI]: '0x7a6DA9903d0a481F40b8336c1463487BC8C0407e',\n  [ChainId.BSC]: '0x2cBA6Ab6574646Badc84F0544d05059e57a5dc42',\n  [ChainId.ARBITRUM]: '0xa010eE0226cd071BeBd8919A1F675cAE1f1f5D3e',\n  [ChainId.AVALANCHE]: '0x513037395FA0C9c35E41f89189ceDfE3bD42fAdb',\n  [ChainId.AVALANCHE_TESTNET]: '',\n  [ChainId.HECO]: '0x2cBA6Ab6574646Badc84F0544d05059e57a5dc42',\n}\n\nexport const SUSHISWAP_SWAPPER_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0x1766733112408b95239aD1951925567CB1203084',\n  [ChainId.MATIC]: '0xe9589382130Ded5DF2397E2fD7A3E9b41DD2701D',\n  [ChainId.XDAI]: '0xE02BDb31C353CE95A1D74F81C93eEa70Bf7371B9',\n  [ChainId.BSC]: '0x1766733112408b95239aD1951925567CB1203084',\n  [ChainId.ARBITRUM]: '0x0bFcD5dD76218bF9e3BE8A1055f9e6D27E5745eb',\n  [ChainId.AVALANCHE]: '0x062eee8B38ab5E8ee3bc58CE505939db53E63785',\n  [ChainId.HECO]: '0x1766733112408b95239aD1951925567CB1203084',\n}\n\nexport const SUSHISWAP_MULTISWAPPER_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0x545820d5Cc05248da112419fEfb18522c63C8e12',\n  [ChainId.KOVAN]: '0xc0c1649b2c67f1a9f5ff1dd618188165e2555bcf',\n  [ChainId.MATIC]: '0x73BE093B84c773fe8eE0f76DDc0829E45c215415',\n  [ChainId.XDAI]: '0x735f0FbEb3b6389986BcaAf073Af07D2F8be2b93',\n  [ChainId.BSC]: '0x86c655cAc122e9A2fd9Ae1f79Df27b30E357968c',\n  [ChainId.ARBITRUM]: '0xbe7D5968296843756109D42946D01195320922EF',\n  [ChainId.AVALANCHE]: '0xB7C8b5BFcd7212f034Be42a2aAb08b8773B76920',\n}\n\nexport const SUSHISWAP_MULTI_EXACT_SWAPPER_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0xB527C5295c4Bc348cBb3a2E96B2494fD292075a7',\n  [ChainId.KOVAN]: '0x75AE0Aa596D39b20addC921DeB5EE3c96279dABE',\n  [ChainId.MATIC]: '0xDB6C4EDd9545d3b815dA85E6429B699c418886f9',\n  [ChainId.XDAI]: '0x07b6e34EeCF38B02e83b6B4702699717e298967E',\n  [ChainId.BSC]: '0x1B16149Edaf1EFa6ADE6aEEF33e63C6e08c9bB1B',\n  [ChainId.ARBITRUM]: '0x860D841bfD1cfEf72A14B2b734005799F07dC7ED',\n  [ChainId.AVALANCHE]: '0x2c46217Fae90D302d1Fb5467ADA504bC2A84f448',\n}\n\nexport const PEGGED_ORACLE_ADDRESS = '0x6cbfbB38498Df0E1e7A4506593cDB02db9001564'\n\nexport const SUSHISWAP_TWAP_0_ORACLE_ADDRESS = '0x66F03B0d30838A3fee971928627ea6F59B236065'\n\nexport const SUSHISWAP_TWAP_1_ORACLE_ADDRESS = '0x0D51b575591F8f74a2763Ade75D3CDCf6789266f'\n\nexport const CHAINLINK_ORACLE_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0x00632CFe43d8F9f8E6cD0d39Ffa3D4fa7ec73CFB',\n  [ChainId.MATIC]: '0x00632CFe43d8F9f8E6cD0d39Ffa3D4fa7ec73CFB',\n  [ChainId.XDAI]: '0x00632CFe43d8F9f8E6cD0d39Ffa3D4fa7ec73CFB',\n  [ChainId.BSC]: '0x00632CFe43d8F9f8E6cD0d39Ffa3D4fa7ec73CFB',\n  [ChainId.ARBITRUM]: '0xB2B5C26B6868be10fF77e4E233fD231ceB90162a',\n  [ChainId.AVALANCHE]: '0x43198B6fA5d89B88D2E072fA4841724571De5A59',\n}\n\nexport const BORING_HELPER_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0x11Ca5375AdAfd6205E41131A4409f182677996E6',\n  [ChainId.KOVAN]: '0x11Ca5375AdAfd6205E41131A4409f182677996E6',\n  [ChainId.MATIC]: '0xA77a7fD5a16237B85E0FAd02C51f459D18AE93Cd',\n  [ChainId.XDAI]: '0x97e4a0fb71243A83A6FbaEF7Cf73617594e4cF2F',\n  [ChainId.BSC]: '0x11Ca5375AdAfd6205E41131A4409f182677996E6',\n  [ChainId.ARBITRUM]: '0x37B3287292De241278fB5FCa514a756E0BE924f8',\n  [ChainId.AVALANCHE]: '0xD18cA07a599bf5eBb9B7327871ad682F0b660748',\n  [ChainId.HECO]: '0x11Ca5375AdAfd6205E41131A4409f182677996E6',\n}\n\nexport const ARCHER_ROUTER_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0x9917C083FF9FbD29Df1367FBF7F2388A9a202431',\n}\n\nexport const MINICHEF_ADDRESS: AddressMap = {\n  [ChainId.MATIC]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\n  [ChainId.XDAI]: '0xdDCbf776dF3dE60163066A5ddDF2277cB445E0F3',\n  [ChainId.HARMONY]: '0x67dA5f2FfaDDfF067AB9d5F025F8810634d84287',\n  [ChainId.ARBITRUM]: '0xF4d73326C13a4Fc5FD7A064217e12780e9Bd62c3',\n}\n\nexport const WETH9_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n  [ChainId.ROPSTEN]: '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n  [ChainId.RINKEBY]: '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n  [ChainId.GÖRLI]: '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6',\n  [ChainId.KOVAN]: '0xd0A1E359811322d97991E03f863a0C30C2cF029C',\n  [ChainId.ARBITRUM]: '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1',\n  [ChainId.ARBITRUM_TESTNET]: '0xf8456e5e6A225C2C1D74D8C9a4cB2B1d5dc1153b',\n  [ChainId.BSC]: '0x2170Ed0880ac9A755fd29B2688956BD959F933F8',\n  [ChainId.FANTOM]: '0x74b23882a30290451A17c44f4F05243b6b58C76d',\n  [ChainId.MATIC]: '0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619',\n  [ChainId.OKEX]: '0x2170Ed0880ac9A755fd29B2688956BD959F933F8',\n  [ChainId.HECO]: '0x64FF637fB478863B7468bc97D30a5bF3A428a1fD',\n  [ChainId.HARMONY]: '0x6983D1E6DEf3690C4d616b13597A09e6193EA013',\n  [ChainId.XDAI]: '0x6A023CCd1ff6F2045C3309768eAd9E68F978f6e1',\n  [ChainId.AVALANCHE]: '0xf20d962a6c8f70c731bd838a3a388D7d48fA6e15',\n}\n\nexport const WNATIVE_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: WETH9_ADDRESS[ChainId.MAINNET],\n  [ChainId.ROPSTEN]: WETH9_ADDRESS[ChainId.ROPSTEN],\n  [ChainId.RINKEBY]: WETH9_ADDRESS[ChainId.RINKEBY],\n  [ChainId.GÖRLI]: WETH9_ADDRESS[ChainId.GÖRLI],\n  [ChainId.KOVAN]: WETH9_ADDRESS[ChainId.KOVAN],\n  [ChainId.ARBITRUM]: WETH9_ADDRESS[ChainId.ARBITRUM],\n  [ChainId.ARBITRUM_TESTNET]: WETH9_ADDRESS[ChainId.ARBITRUM_TESTNET],\n  [ChainId.FANTOM]: '0x21be370D5312f44cB42ce377BC9b8a0cEF1A4C83',\n  [ChainId.FANTOM_TESTNET]: '0xf1277d1Ed8AD466beddF92ef448A132661956621',\n  [ChainId.MATIC]: '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270',\n  [ChainId.MATIC_TESTNET]: '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270',\n  [ChainId.XDAI]: '0xe91D153E0b41518A2Ce8Dd3D7944Fa863463a97d',\n  [ChainId.BSC]: '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\n  [ChainId.BSC_TESTNET]: '0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd',\n  [ChainId.MOONBEAM_TESTNET]: '0xe73763DB808ecCDC0E36bC8E32510ED126910394',\n  [ChainId.AVALANCHE]: '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7',\n  [ChainId.AVALANCHE_TESTNET]: '0xd00ae08403B9bbb9124bB305C09058E32C39A48c',\n  [ChainId.HECO]: '0x5545153CCFcA01fbd7Dd11C0b23ba694D9509A6F',\n  [ChainId.HECO_TESTNET]: '0x5B2DA6F42CA09C77D577a12BeaD0446148830687',\n  [ChainId.HARMONY]: '0xcF664087a5bB0237a0BAd6742852ec6c8d69A27a',\n  [ChainId.HARMONY_TESTNET]: '0x7a2afac38517d512E55C0bCe3b6805c10a04D60F',\n  [ChainId.OKEX]: '0x8F8526dbfd6E38E3D8307702cA8469Bae6C56C15',\n  [ChainId.OKEX_TESTNET]: '0x2219845942d28716c0F7C605765fABDcA1a7d9E0',\n  [ChainId.CELO]: '0x471EcE3750Da237f93B8E339c536989b8978a438',\n  [ChainId.PALM]: '0xF98cABF0a963452C5536330408B2590567611a71',\n  [ChainId.MOONRIVER]: '0xf50225a84382c74CbdeA10b0c176f71fc3DE0C4d',\n  [ChainId.FUSE]: '0x0BE9e53fd7EDaC9F859882AfdDa116645287C629',\n}\n\nexport const MASTERCHEF_V2_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0xEF0881eC094552b2e128Cf945EF17a6752B4Ec5d',\n}\n\nexport const ENS_REGISTRAR_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e',\n  [ChainId.GÖRLI]: '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e',\n  [ChainId.ROPSTEN]: '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e',\n  [ChainId.RINKEBY]: '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e',\n}\n\nexport const ZAPPER_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0xcff6eF0B9916682B37D80c19cFF8949bc1886bC2',\n  [ChainId.ROPSTEN]: '0xcff6eF0B9916682B37D80c19cFF8949bc1886bC2',\n}\n\nexport const MERKLE_DISTRIBUTOR_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0xcBE6B83e77cdc011Cc18F6f0Df8444E5783ed982',\n  [ChainId.ROPSTEN]: '0x84d1f7202e0e7dac211617017ca72a2cb5e2b955',\n}\n\nexport const MULTICALL2_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0x5BA1e12693Dc8F9c48aAD8770482f4739bEeD696',\n  [ChainId.ROPSTEN]: '0x5BA1e12693Dc8F9c48aAD8770482f4739bEeD696',\n  [ChainId.RINKEBY]: '0x5BA1e12693Dc8F9c48aAD8770482f4739bEeD696',\n  [ChainId.GÖRLI]: '0x5BA1e12693Dc8F9c48aAD8770482f4739bEeD696',\n  [ChainId.KOVAN]: '0x5BA1e12693Dc8F9c48aAD8770482f4739bEeD696',\n  [ChainId.ARBITRUM]: '0x80C7DD17B01855a6D2347444a0FCC36136a314de',\n  [ChainId.ARBITRUM_TESTNET]: '0xa501c031958F579dB7676fF1CE78AD305794d579',\n  [ChainId.CELO]: '0x9aac9048fC8139667D6a2597B902865bfdc225d3',\n  [ChainId.FANTOM]: '0x22D4cF72C45F8198CfbF4B568dBdB5A85e8DC0B5',\n  [ChainId.MATIC]: '0x02817C1e3543c2d908a590F5dB6bc97f933dB4BD',\n  [ChainId.XDAI]: '0x67dA5f2FfaDDfF067AB9d5F025F8810634d84287',\n  [ChainId.BSC]: '0xa9193376D09C7f31283C54e56D013fCF370Cd9D9',\n  [ChainId.AVALANCHE]: '0xdDCbf776dF3dE60163066A5ddDF2277cB445E0F3',\n  [ChainId.HECO]: '0xdDCbf776dF3dE60163066A5ddDF2277cB445E0F3',\n  [ChainId.HARMONY]: '0xdDCbf776dF3dE60163066A5ddDF2277cB445E0F3',\n  [ChainId.OKEX]: '0xF4d73326C13a4Fc5FD7A064217e12780e9Bd62c3',\n  [ChainId.PALM]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\n  [ChainId.MOONRIVER]: '0x270f2F35bED92B7A59eA5F08F6B3fd34c8D9D9b5',\n  [ChainId.FUSE]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\n}\n","import { Currency } from './Currency'\nimport { Token } from './Token'\nimport invariant from 'tiny-invariant'\n\n/**\n * A currency is any fungible financial instrument, including Ether, all ERC20 tokens, and other chain-native currencies\n */\nexport abstract class AbstractCurrency {\n  /**\n   * Returns whether the currency is native to the chain and must be wrapped (e.g. Ether)\n   */\n  public abstract readonly isNative: boolean\n  /**\n   * Returns whether the currency is a token that is usable in Uniswap without wrapping\n   */\n  public abstract readonly isToken: boolean\n\n  /**\n   * The chain ID on which this currency resides\n   */\n  public readonly chainId: number\n  /**\n   * The decimals used in representing currency amounts\n   */\n  public readonly decimals: number\n  /**\n   * The symbol of the currency, i.e. a short textual non-unique identifier\n   */\n  public readonly symbol?: string\n  /**\n   * The name of the currency, i.e. a descriptive textual non-unique identifier\n   */\n  public readonly name?: string\n\n  /**\n   * Constructs an instance of the base class `BaseCurrency`.\n   * @param chainId the chain ID on which this currency resides\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(chainId: number, decimals: number, symbol?: string, name?: string) {\n    invariant(Number.isSafeInteger(chainId), 'CHAIN_ID')\n    invariant(decimals >= 0 && decimals < 255 && Number.isInteger(decimals), 'DECIMALS')\n\n    this.chainId = chainId\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n\n  /**\n   * Returns whether this currency is functionally equivalent to the other currency\n   * @param other the other currency\n   */\n  public abstract equals(other: Currency): boolean\n\n  /**\n   * Return the wrapped version of this currency that can be used with the Uniswap contracts. Currencies must\n   * implement this to be used in Uniswap\n   */\n  public abstract get wrapped(): Token\n}\n","import { AbstractCurrency } from './AbstractCurrency'\n\n/**\n * Represents the native currency of the chain on which it resides, e.g.\n */\nexport abstract class NativeCurrency extends AbstractCurrency {\n  public readonly isNative: true = true\n  public readonly isToken: false = false\n}\n","import { getAddress } from '@ethersproject/address'\nimport invariant from 'tiny-invariant'\nimport warning from 'tiny-warning'\n\n// warns if addresses are not checksummed\nexport function validateAndParseAddress(address: string): string {\n  try {\n    const checksummedAddress = getAddress(address)\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\n    return checksummedAddress\n  } catch (error) {\n    invariant(false, `${address} is not a valid address.`)\n  }\n}\n","import { AbstractCurrency } from './AbstractCurrency'\nimport { Currency } from './Currency'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from '../functions/validateAndParseAddress'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends AbstractCurrency {\n  public readonly chainId: number\n  public readonly address: string\n\n  public readonly isNative: false = false\n  public readonly isToken: true = true\n\n  public constructor(chainId: number, address: string, decimals: number, symbol?: string, name?: string) {\n    super(chainId, decimals, symbol, name)\n    this.chainId = chainId\n    this.address = validateAndParseAddress(address)\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Currency): boolean {\n    return other.isToken && this.chainId === other.chainId && this.address === other.address\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address !== other.address, 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n\n  /**\n   * Return this token, which does not need to be wrapped\n   */\n  public get wrapped(): Token {\n    return this\n  }\n}\n\n/**\n * Compares two currencies for equality\n */\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\n  if (currencyA instanceof Token && currencyB instanceof Token) {\n    return currencyA.equals(currencyB)\n  } else if (currencyA instanceof Token) {\n    return false\n  } else if (currencyB instanceof Token) {\n    return false\n  } else {\n    return currencyA === currencyB\n  }\n}\n","import { USDC_ADDRESS, WETH9_ADDRESS, WNATIVE_ADDRESS } from './addresses'\n\nimport { ChainId } from '../enums'\nimport { Token } from '../entities/Token'\nimport { TokenMap } from '../types/TokenMap'\n\nexport const USDC: TokenMap = {\n  [ChainId.MAINNET]: new Token(ChainId.MAINNET, USDC_ADDRESS[ChainId.MAINNET], 6, 'USDC', 'USD Coin'),\n  [ChainId.ROPSTEN]: new Token(ChainId.ROPSTEN, USDC_ADDRESS[ChainId.ROPSTEN], 6, 'USDC', 'USD Coin'),\n  [ChainId.KOVAN]: new Token(ChainId.KOVAN, USDC_ADDRESS[ChainId.KOVAN], 6, 'USDC', 'USD Coin'),\n  [ChainId.MATIC]: new Token(ChainId.MATIC, USDC_ADDRESS[ChainId.MATIC], 6, 'USDC', 'USD Coin'),\n  [ChainId.FANTOM]: new Token(ChainId.FANTOM, USDC_ADDRESS[ChainId.FANTOM], 6, 'USDC', 'USD Coin'),\n  [ChainId.BSC]: new Token(ChainId.BSC, USDC_ADDRESS[ChainId.BSC], 18, 'USDC', 'USD Coin'),\n  [ChainId.HARMONY]: new Token(ChainId.HARMONY, USDC_ADDRESS[ChainId.HARMONY], 6, 'USDC', 'USD Coin'),\n  [ChainId.HECO]: new Token(ChainId.HECO, USDC_ADDRESS[ChainId.HECO], 6, 'USDC', 'USD Coin'),\n  [ChainId.OKEX]: new Token(ChainId.OKEX, USDC_ADDRESS[ChainId.OKEX], 18, 'USDC', 'USD Coin'),\n  [ChainId.XDAI]: new Token(ChainId.XDAI, USDC_ADDRESS[ChainId.XDAI], 6, 'USDC', 'USD Coin'),\n  [ChainId.ARBITRUM]: new Token(ChainId.ARBITRUM, USDC_ADDRESS[ChainId.ARBITRUM], 6, 'USDC', 'USD Coin'),\n}\n\nexport const WETH9: TokenMap = {\n  [ChainId.MAINNET]: new Token(ChainId.MAINNET, WETH9_ADDRESS[ChainId.MAINNET], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.ROPSTEN]: new Token(ChainId.ROPSTEN, WETH9_ADDRESS[ChainId.ROPSTEN], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.RINKEBY]: new Token(ChainId.RINKEBY, WETH9_ADDRESS[ChainId.RINKEBY], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.GÖRLI]: new Token(ChainId.GÖRLI, WETH9_ADDRESS[ChainId.GÖRLI], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.KOVAN]: new Token(ChainId.KOVAN, WETH9_ADDRESS[ChainId.KOVAN], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.ARBITRUM]: new Token(ChainId.ARBITRUM, WETH9_ADDRESS[ChainId.ARBITRUM], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.ARBITRUM_TESTNET]: new Token(\n    ChainId.ARBITRUM_TESTNET,\n    WETH9_ADDRESS[ChainId.ARBITRUM_TESTNET],\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.BSC]: new Token(ChainId.BSC, WETH9_ADDRESS[ChainId.BSC], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.FANTOM]: new Token(ChainId.FANTOM, WETH9_ADDRESS[ChainId.FANTOM], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.MATIC]: new Token(ChainId.MATIC, WETH9_ADDRESS[ChainId.MATIC], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.OKEX]: new Token(ChainId.OKEX, WETH9_ADDRESS[ChainId.OKEX], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.HECO]: new Token(ChainId.HECO, WETH9_ADDRESS[ChainId.HECO], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.HARMONY]: new Token(ChainId.HARMONY, WETH9_ADDRESS[ChainId.HARMONY], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.XDAI]: new Token(ChainId.XDAI, WETH9_ADDRESS[ChainId.XDAI], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.AVALANCHE]: new Token(ChainId.AVALANCHE, WETH9_ADDRESS[ChainId.AVALANCHE], 18, 'WETH', 'Wrapped Ether'),\n}\n\nexport const WNATIVE: TokenMap = {\n  [ChainId.MAINNET]: WETH9[ChainId.MAINNET],\n  [ChainId.ROPSTEN]: WETH9[ChainId.ROPSTEN],\n  [ChainId.RINKEBY]: WETH9[ChainId.RINKEBY],\n  [ChainId.GÖRLI]: WETH9[ChainId.GÖRLI],\n  [ChainId.KOVAN]: WETH9[ChainId.KOVAN],\n  [ChainId.FANTOM]: new Token(ChainId.FANTOM, WNATIVE_ADDRESS[ChainId.FANTOM], 18, 'WFTM', 'Wrapped FTM'),\n  [ChainId.FANTOM_TESTNET]: new Token(\n    ChainId.FANTOM_TESTNET,\n    WNATIVE_ADDRESS[ChainId.FANTOM_TESTNET],\n    18,\n    'FTM',\n    'Wrapped FTM'\n  ),\n  [ChainId.MATIC]: new Token(ChainId.MATIC, WNATIVE_ADDRESS[ChainId.MATIC], 18, 'WMATIC', 'Wrapped Matic'),\n  [ChainId.MATIC_TESTNET]: new Token(\n    ChainId.MATIC_TESTNET,\n    WNATIVE_ADDRESS[ChainId.MATIC_TESTNET],\n    18,\n    'WMATIC',\n    'Wrapped Matic'\n  ),\n  [ChainId.XDAI]: new Token(ChainId.XDAI, WNATIVE_ADDRESS[ChainId.XDAI], 18, 'WXDAI', 'Wrapped xDai'),\n  [ChainId.BSC]: new Token(ChainId.BSC, WNATIVE_ADDRESS[ChainId.BSC], 18, 'WBNB', 'Wrapped BNB'),\n  [ChainId.BSC_TESTNET]: new Token(\n    ChainId.BSC_TESTNET,\n    WNATIVE_ADDRESS[ChainId.BSC_TESTNET],\n    18,\n    'WBNB',\n    'Wrapped BNB'\n  ),\n  [ChainId.ARBITRUM]: WETH9[ChainId.ARBITRUM],\n  [ChainId.ARBITRUM_TESTNET]: WETH9[ChainId.ARBITRUM_TESTNET],\n  [ChainId.MOONBEAM_TESTNET]: new Token(\n    ChainId.MOONBEAM_TESTNET,\n    WNATIVE_ADDRESS[ChainId.MOONBEAM_TESTNET],\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.AVALANCHE]: new Token(ChainId.AVALANCHE, WNATIVE_ADDRESS[ChainId.AVALANCHE], 18, 'WAVAX', 'Wrapped AVAX'),\n  [ChainId.AVALANCHE_TESTNET]: new Token(\n    ChainId.AVALANCHE_TESTNET,\n    WNATIVE_ADDRESS[ChainId.AVALANCHE_TESTNET],\n    18,\n    'WAVAX',\n    'Wrapped AVAX'\n  ),\n  [ChainId.HECO]: new Token(ChainId.HECO, WNATIVE_ADDRESS[ChainId.HECO], 18, 'WHT', 'Wrapped HT'),\n  [ChainId.HECO_TESTNET]: new Token(\n    ChainId.HECO_TESTNET,\n    WNATIVE_ADDRESS[ChainId.HECO_TESTNET],\n    18,\n    'WHT',\n    'Wrapped HT'\n  ),\n  [ChainId.HARMONY]: new Token(ChainId.HARMONY, WNATIVE_ADDRESS[ChainId.HARMONY], 18, 'WONE', 'Wrapped ONE'),\n  [ChainId.HARMONY_TESTNET]: new Token(\n    ChainId.HARMONY_TESTNET,\n    WNATIVE_ADDRESS[ChainId.HARMONY_TESTNET],\n    18,\n    'WONE',\n    'Wrapped ONE'\n  ),\n  [ChainId.OKEX]: new Token(ChainId.OKEX, WNATIVE_ADDRESS[ChainId.OKEX], 18, 'WOKT', 'Wrapped OKExChain'),\n  [ChainId.OKEX_TESTNET]: new Token(\n    ChainId.OKEX_TESTNET,\n    WNATIVE_ADDRESS[ChainId.OKEX_TESTNET],\n    18,\n    'WOKT',\n    'Wrapped OKExChain'\n  ),\n  [ChainId.CELO]: new Token(ChainId.CELO, WNATIVE_ADDRESS[ChainId.CELO], 18, 'CELO', 'Celo'),\n  [ChainId.PALM]: new Token(ChainId.PALM, WNATIVE_ADDRESS[ChainId.PALM], 18, 'WPALM', 'Wrapped Palm'),\n  [ChainId.MOONRIVER]: new Token(\n    ChainId.MOONRIVER,\n    WNATIVE_ADDRESS[ChainId.MOONRIVER],\n    18,\n    'WMOVR',\n    'Wrapped Moonriver'\n  ),\n  [ChainId.FUSE]: new Token(ChainId.FUSE, WNATIVE_ADDRESS[ChainId.FUSE], 18, 'WFUSE', 'Wrapped Fuse'),\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Avalanche extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'AVAX', 'Avalanche')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Avalanche } = {}\n\n  public static onChain(chainId: number): Avalanche {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Avalanche(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Binance extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'BNB', 'Binance Coin')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Binance } = {}\n\n  public static onChain(chainId: number): Binance {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Binance(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Celo extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'CELO', 'Celo')\n  }\n\n  public get wrapped(): Token {\n    const wcelo = WNATIVE[this.chainId]\n    invariant(!!wcelo, 'WRAPPED')\n    return wcelo\n  }\n\n  private static _cache: { [chainId: number]: Celo } = {}\n\n  public static onChain(chainId: number): Celo {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Celo(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WETH9 } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\n/**\n * Ether is the main usage of a 'native' currency, i.e. for Ethereum mainnet and all testnets\n */\nexport class Ether extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'ETH', 'Ether')\n  }\n\n  public get wrapped(): Token {\n    const weth9 = WETH9[this.chainId]\n    invariant(!!weth9, 'WRAPPED')\n    return weth9\n  }\n\n  private static _etherCache: { [chainId: number]: Ether } = {}\n\n  public static onChain(chainId: number): Ether {\n    return this._etherCache[chainId] ?? (this._etherCache[chainId] = new Ether(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Fantom extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'FTM', 'Fantom')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Fantom } = {}\n\n  public static onChain(chainId: number): Fantom {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Fantom(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Harmony extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'ONE', 'Harmony')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Harmony } = {}\n\n  public static onChain(chainId: number): Harmony {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Harmony(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Heco extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'HT', 'Huobi Token')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Heco } = {}\n\n  public static onChain(chainId: number): Heco {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Heco(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Matic extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'MATIC', 'Matic')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Matic } = {}\n\n  public static onChain(chainId: number): Matic {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Matic(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Movr extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'MOVR', 'Moonriver')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Movr } = {}\n\n  public static onChain(chainId: number): Movr {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Movr(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Okex extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'OKT', 'OKExChain')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Okex } = {}\n\n  public static onChain(chainId: number): Okex {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Okex(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class xDai extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'XDAI', 'xDai')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: xDai } = {}\n\n  public static onChain(chainId: number): xDai {\n    return this._cache[chainId] ?? (this._cache[chainId] = new xDai(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Palm extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'PALM', 'Palm')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Palm } = {}\n\n  public static onChain(chainId: number): Palm {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Palm(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Fuse extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'FUSE', 'Fuse')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Fuse } = {}\n\n  public static onChain(chainId: number): Fuse {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Fuse(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import {\n  Avalanche,\n  Binance,\n  Celo,\n  Ether,\n  Fantom,\n  Fuse,\n  Harmony,\n  Heco,\n  Matic,\n  Movr,\n  Okex,\n  Palm,\n  xDai,\n} from '../entities/Native'\n\nimport { ChainId } from '../enums'\n\nexport const NATIVE = {\n  [ChainId.MAINNET]: Ether.onChain(ChainId.MAINNET),\n  [ChainId.ROPSTEN]: Ether.onChain(ChainId.ROPSTEN),\n  [ChainId.RINKEBY]: Ether.onChain(ChainId.RINKEBY),\n  [ChainId.GÖRLI]: Ether.onChain(ChainId.GÖRLI),\n  [ChainId.KOVAN]: Ether.onChain(ChainId.KOVAN),\n  [ChainId.FANTOM]: Fantom.onChain(ChainId.FANTOM),\n  [ChainId.FANTOM_TESTNET]: Fantom.onChain(ChainId.FANTOM_TESTNET),\n  [ChainId.MATIC]: Matic.onChain(ChainId.MATIC),\n  [ChainId.MATIC_TESTNET]: Matic.onChain(ChainId.MATIC_TESTNET),\n  [ChainId.XDAI]: xDai.onChain(ChainId.XDAI),\n  [ChainId.BSC]: Binance.onChain(ChainId.BSC),\n  [ChainId.BSC_TESTNET]: Binance.onChain(ChainId.BSC_TESTNET),\n  // [ChainId.MOONBEAM_TESTNET]: Currency.GLMR,\n  [ChainId.ARBITRUM]: Ether.onChain(ChainId.ARBITRUM),\n  [ChainId.AVALANCHE]: Avalanche.onChain(ChainId.AVALANCHE),\n  [ChainId.AVALANCHE_TESTNET]: Avalanche.onChain(ChainId.AVALANCHE_TESTNET),\n  [ChainId.HECO]: Heco.onChain(ChainId.HECO),\n  [ChainId.HECO_TESTNET]: Heco.onChain(ChainId.HECO_TESTNET),\n  [ChainId.HARMONY]: Harmony.onChain(ChainId.HARMONY),\n  [ChainId.HARMONY_TESTNET]: Harmony.onChain(ChainId.HARMONY_TESTNET),\n  [ChainId.OKEX]: Okex.onChain(ChainId.OKEX),\n  [ChainId.OKEX_TESTNET]: Okex.onChain(ChainId.OKEX_TESTNET),\n  [ChainId.CELO]: Celo.onChain(ChainId.CELO),\n  [ChainId.PALM]: Palm.onChain(ChainId.PALM),\n  [ChainId.MOONRIVER]: Movr.onChain(ChainId.MOONRIVER),\n  [ChainId.FUSE]: Fuse.onChain(ChainId.FUSE),\n}\n","import JSBI from 'jsbi'\n\nexport const MaxUint256 = JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const TWO = JSBI.BigInt(2)\nexport const THREE = JSBI.BigInt(3)\nexport const FIVE = JSBI.BigInt(5)\nexport const TEN = JSBI.BigInt(10)\nexport const _100 = JSBI.BigInt(100)\nexport const _997 = JSBI.BigInt(997)\nexport const _1000 = JSBI.BigInt(1000)\n","import { ChainId, ChainKey } from '../enums'\n\nimport JSBI from 'jsbi'\n\nexport * from './addresses'\nexport * from './natives'\nexport * from './numbers'\nexport * from './tokens'\n\n// export const INIT_CODE_HASH: string = '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303'\n\nexport const CHAIN_KEY: { [chainId: number]: ChainKey } = {\n  [ChainId.KOVAN]: ChainKey.KOVAN,\n}\n\nexport const INIT_CODE_HASH: { [chainId: number]: string } = {\n  [ChainId.MAINNET]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.ROPSTEN]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.RINKEBY]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.GÖRLI]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.KOVAN]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.FANTOM]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.MATIC]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.MATIC_TESTNET]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.XDAI]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.BSC]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.BSC_TESTNET]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.ARBITRUM]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.MOONBEAM_TESTNET]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.AVALANCHE]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.AVALANCHE_TESTNET]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.HECO]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.HECO_TESTNET]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.HARMONY]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.HARMONY_TESTNET]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.OKEX]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.OKEX_TESTNET]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.CELO]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.PALM]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.MOONRIVER]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.FUSE]: '0x1901958ef8b470f2c0a3875a79ee0bd303866d85102c0f1ea820d317024d50b5',\n}\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\nexport enum SolidityType {\n  uint8 = 'uint8',\n  uint256 = 'uint256',\n}\n\nexport const SOLIDITY_TYPE_MAXIMA = {\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'),\n}\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import _Big, { RoundingMode } from 'big.js'\n\nimport { BigintIsh } from '../types'\nimport JSBI from 'jsbi'\nimport { Rounding } from '../enums'\nimport _Decimal from 'decimal.js-light'\nimport invariant from 'tiny-invariant'\nimport toFormat from 'toformat'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nBig.strict = true\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP,\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp,\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = JSBI.BigInt(1)) {\n    this.numerator = JSBI.BigInt(numerator)\n    this.denominator = JSBI.BigInt(denominator)\n  }\n\n  private static tryParseFraction(fractionish: BigintIsh | Fraction): Fraction {\n    if (fractionish instanceof JSBI || typeof fractionish === 'number' || typeof fractionish === 'string')\n      return new Fraction(fractionish)\n\n    if ('numerator' in fractionish && 'denominator' in fractionish) return fractionish\n    throw new Error('Could not parse fraction')\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({\n      precision: significantDigits + 1,\n      rounding: toSignificantRounding[rounding],\n    })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n\n  /**\n   * Helper method for converting any super class back to a fraction\n   */\n  public get asFraction(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n}\n","import { BigintIsh } from '../types'\nimport { Currency } from './Currency'\nimport { Fraction } from './Fraction'\nimport JSBI from 'jsbi'\nimport { MaxUint256 } from '../constants'\nimport { Rounding } from '../enums'\nimport { Token } from './Token'\nimport _Big from 'big.js'\nimport invariant from 'tiny-invariant'\nimport toFormat from 'toformat'\n\nconst Big = toFormat(_Big)\n\nBig.strict = true\n\nexport class CurrencyAmount<T extends Currency> extends Fraction {\n  public readonly currency: T\n  public readonly decimalScale: JSBI\n\n  /**\n   * Returns a new currency amount instance from the unitless amount of token, i.e. the raw amount\n   * @param currency the currency in the amount\n   * @param rawAmount the raw token or ether amount\n   */\n  public static fromRawAmount<T extends Currency>(currency: T, rawAmount: BigintIsh): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, rawAmount)\n  }\n\n  /**\n   * Construct a currency amount with a denominator that is not equal to 1\n   * @param currency the currency\n   * @param numerator the numerator of the fractional token amount\n   * @param denominator the denominator of the fractional token amount\n   */\n  public static fromFractionalAmount<T extends Currency>(\n    currency: T,\n    numerator: BigintIsh,\n    denominator: BigintIsh\n  ): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, numerator, denominator)\n  }\n\n  protected constructor(currency: T, numerator: BigintIsh, denominator?: BigintIsh) {\n    super(numerator, denominator)\n    invariant(JSBI.lessThanOrEqual(this.quotient, MaxUint256), 'AMOUNT')\n    this.currency = currency\n    this.decimalScale = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(currency.decimals))\n  }\n\n  public add(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const added = super.add(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, added.numerator, added.denominator)\n  }\n\n  public subtract(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const subtracted = super.subtract(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, subtracted.numerator, subtracted.denominator)\n  }\n\n  public multiply(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const multiplied = super.multiply(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, multiplied.numerator, multiplied.denominator)\n  }\n\n  public divide(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const divided = super.divide(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, divided.numerator, divided.denominator)\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.divide(this.decimalScale).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.divide(this.decimalScale).toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.quotient.toString()).div(this.decimalScale.toString()).toFormat(format)\n  }\n\n  public get wrapped(): CurrencyAmount<Token> {\n    if (this.currency.isToken) return this as CurrencyAmount<Token>\n    return CurrencyAmount.fromFractionalAmount(this.currency.wrapped, this.numerator, this.denominator)\n  }\n}\n","import { BigintIsh } from '../types'\nimport { Currency } from './Currency'\nimport { CurrencyAmount } from './CurrencyAmount'\nimport { Fraction } from './Fraction'\nimport JSBI from 'jsbi'\nimport { Rounding } from '../enums'\nimport invariant from 'tiny-invariant'\n\nexport class Price<TBase extends Currency, TQuote extends Currency> extends Fraction {\n  public readonly baseCurrency: TBase // input i.e. denominator\n  public readonly quoteCurrency: TQuote // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  /**\n   * Construct a price, either with the base and quote currency amount, or the\n   * @param args\n   */\n  public constructor(\n    ...args:\n      | [TBase, TQuote, BigintIsh, BigintIsh]\n      | [\n          {\n            baseAmount: CurrencyAmount<TBase>\n            quoteAmount: CurrencyAmount<TQuote>\n          }\n        ]\n  ) {\n    let baseCurrency: TBase, quoteCurrency: TQuote, denominator: BigintIsh, numerator: BigintIsh\n\n    if (args.length === 4) {\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = args\n    } else {\n      const result = args[0].quoteAmount.divide(args[0].baseAmount)\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = [\n        args[0].baseAmount.currency,\n        args[0].quoteAmount.currency,\n        result.denominator,\n        result.numerator,\n      ]\n    }\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  /**\n   * Flip the price, switching the base and quote currency\n   */\n  public invert(): Price<TQuote, TBase> {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  /**\n   * Multiply the price by another price, returning a new price. The other price must have the same base currency as this price's quote currency\n   * @param other the other price\n   */\n  public multiply<TOtherQuote extends Currency>(other: Price<TQuote, TOtherQuote>): Price<TBase, TOtherQuote> {\n    invariant(this.quoteCurrency.equals(other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  /**\n   * Return the amount of quote currency corresponding to a given amount of the base currency\n   * @param currencyAmount the amount of base currency to quote against the price\n   */\n  public quote(currencyAmount: CurrencyAmount<TBase>): CurrencyAmount<TQuote> {\n    invariant(currencyAmount.currency.equals(this.baseCurrency), 'TOKEN')\n    const result = super.multiply(currencyAmount)\n    return CurrencyAmount.fromFractionalAmount(this.quoteCurrency, result.numerator, result.denominator)\n  }\n\n  /**\n   * Get the value scaled by decimals for formatting\n   * @private\n   */\n  private get adjustedForDecimals(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjustedForDecimals.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjustedForDecimals.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import { keccak256, pack } from '@ethersproject/solidity'\n\nimport { INIT_CODE_HASH } from '../constants'\nimport { Token } from '../entities'\nimport { getCreate2Address } from '@ethersproject/address'\n\nexport const computePairAddress = ({\n  factoryAddress,\n  tokenA,\n  tokenB,\n}: {\n  factoryAddress: string\n  tokenA: Token\n  tokenB: Token\n}): string => {\n  const [token0, token1] = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n  return getCreate2Address(\n    factoryAddress,\n    keccak256(['bytes'], [pack(['address', 'address'], [token0.address, token1.address])]),\n    INIT_CODE_HASH[token0.chainId]\n  )\n}\n","import { ONE, TWO, ZERO } from '../constants/numbers'\n\nimport JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nexport const MAX_SAFE_INTEGER = JSBI.BigInt(Number.MAX_SAFE_INTEGER)\n\n/**\n * Computes floor(sqrt(value))\n * @param value the value for which to compute the square root, rounded down\n */\nexport function sqrt(value: JSBI): JSBI {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), 'NEGATIVE')\n\n  // rely on built in sqrt if possible\n  if (JSBI.lessThan(value, MAX_SAFE_INTEGER)) {\n    return JSBI.BigInt(Math.floor(Math.sqrt(JSBI.toNumber(value))))\n  }\n\n  let z: JSBI\n  let x: JSBI\n  z = value\n  x = JSBI.add(JSBI.divide(value, TWO), ONE)\n  while (JSBI.lessThan(x, z)) {\n    z = x\n    x = JSBI.divide(JSBI.add(JSBI.divide(value, x), x), TWO)\n  }\n  return z\n}\n\n/**\n * Returns the smallest member of the array\n * @param values the values from which the smallest gets returned\n * @returns the smallest memmber of the array\n */\nexport function minimum(...values: JSBI[]): JSBI {\n  let lowest = values[0]\n  for (let i = 1; i < values.length; i++) {\n    const value = values[i]\n    if (JSBI.LT(value, lowest)) {\n      lowest = value\n    }\n  }\n  return lowest\n}\n\n/**\n * Returns the biggest member of the array\n * @param values the values from which the biggest gets returned\n * @returns the biggest memmber of the array\n */\nexport function maximum(...values: JSBI[]): JSBI {\n  let highest = values[0]\n  for (let i = 1; i < values.length; i++) {\n    const value = values[i]\n    if (JSBI.GT(value, highest)) {\n      highest = value\n    }\n  }\n  return highest\n}\n\nexport function difference(a: JSBI, b: JSBI): JSBI {\n  if (JSBI.greaterThan(a, b)) {\n    return JSBI.subtract(a, b)\n  }\n  return JSBI.subtract(b, a)\n}\n","import { FACTORY_ADDRESS, FIVE, MINIMUM_LIQUIDITY, ONE, ZERO, _1000, _997 } from '../constants'\nimport { InsufficientInputAmountError, InsufficientReservesError } from '../errors'\n\nimport { BigintIsh } from '../types'\nimport { CurrencyAmount } from './CurrencyAmount'\nimport JSBI from 'jsbi'\nimport { Price } from './Price'\nimport { Token } from './Token'\nimport { computePairAddress } from '../functions/computePairAddress'\nimport invariant from 'tiny-invariant'\nimport { sqrt } from '../functions/math'\n\nexport class Pair {\n  public readonly liquidityToken: Token\n  private readonly tokenAmounts: [CurrencyAmount<Token>, CurrencyAmount<Token>]\n\n  public static getAddress(tokenA: Token, tokenB: Token): string {\n    return computePairAddress({\n      factoryAddress: FACTORY_ADDRESS[tokenA.chainId],\n      tokenA,\n      tokenB,\n    })\n  }\n\n  public constructor(currencyAmountA: CurrencyAmount<Token>, currencyAmountB: CurrencyAmount<Token>) {\n    const currencyAmounts = currencyAmountA.currency.sortsBefore(currencyAmountB.currency) // does safety checks\n      ? [currencyAmountA, currencyAmountB]\n      : [currencyAmountB, currencyAmountA]\n    this.liquidityToken = new Token(\n      currencyAmounts[0].currency.chainId,\n      Pair.getAddress(currencyAmounts[0].currency, currencyAmounts[1].currency),\n      18,\n      'UNI-V2',\n      'Uniswap V2'\n    )\n    this.tokenAmounts = currencyAmounts as [CurrencyAmount<Token>, CurrencyAmount<Token>]\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price<Token, Token> {\n    const result = this.tokenAmounts[1].divide(this.tokenAmounts[0])\n    return new Price(this.token0, this.token1, result.denominator, result.numerator)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price<Token, Token> {\n    const result = this.tokenAmounts[0].divide(this.tokenAmounts[1])\n    return new Price(this.token1, this.token0, result.denominator, result.numerator)\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price<Token, Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): number {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].currency\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].currency\n  }\n\n  public get reserve0(): CurrencyAmount<Token> {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): CurrencyAmount<Token> {\n    return this.tokenAmounts[1]\n  }\n\n  public reserveOf(token: Token): CurrencyAmount<Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  public getOutputAmount(inputAmount: CurrencyAmount<Token>): [CurrencyAmount<Token>, Pair] {\n    invariant(this.involvesToken(inputAmount.currency), 'TOKEN')\n    if (JSBI.equal(this.reserve0.quotient, ZERO) || JSBI.equal(this.reserve1.quotient, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.currency)\n    const outputReserve = this.reserveOf(inputAmount.currency.equals(this.token0) ? this.token1 : this.token0)\n    const inputAmountWithFee = JSBI.multiply(inputAmount.quotient, _997)\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.quotient)\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.quotient, _1000), inputAmountWithFee)\n    const outputAmount = CurrencyAmount.fromRawAmount(\n      inputAmount.currency.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator)\n    )\n    if (JSBI.equal(outputAmount.quotient, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getInputAmount(outputAmount: CurrencyAmount<Token>): [CurrencyAmount<Token>, Pair] {\n    invariant(this.involvesToken(outputAmount.currency), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.quotient, ZERO) ||\n      JSBI.equal(this.reserve1.quotient, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.quotient, this.reserveOf(outputAmount.currency).quotient)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.currency)\n    const inputReserve = this.reserveOf(outputAmount.currency.equals(this.token0) ? this.token1 : this.token0)\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.quotient, outputAmount.quotient), _1000)\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.quotient, outputAmount.quotient), _997)\n    const inputAmount = CurrencyAmount.fromRawAmount(\n      outputAmount.currency.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\n    )\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getLiquidityMinted(\n    totalSupply: CurrencyAmount<Token>,\n    tokenAmountA: CurrencyAmount<Token>,\n    tokenAmountB: CurrencyAmount<Token>\n  ): CurrencyAmount<Token> {\n    invariant(totalSupply.currency.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.currency.sortsBefore(tokenAmountB.currency) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].currency.equals(this.token0) && tokenAmounts[1].currency.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.quotient, ZERO)) {\n      liquidity = JSBI.subtract(\n        sqrt(JSBI.multiply(tokenAmounts[0].quotient, tokenAmounts[1].quotient)),\n        MINIMUM_LIQUIDITY\n      )\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].quotient, totalSupply.quotient), this.reserve0.quotient)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].quotient, totalSupply.quotient), this.reserve1.quotient)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n\n      console.log({\n        amount0: amount0.toString(),\n        amount1: amount1.toString(),\n        liquidity: liquidity.toString(),\n        totalSupply: totalSupply.quotient.toString(),\n        kLast: sqrt(JSBI.multiply(this.tokenAmounts[0].quotient, this.tokenAmounts[1].quotient)),\n      })\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n\n    return CurrencyAmount.fromRawAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: CurrencyAmount<Token>,\n    liquidity: CurrencyAmount<Token>,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): CurrencyAmount<Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.currency.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.currency.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.quotient, totalSupply.quotient), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: CurrencyAmount<Token>\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = JSBI.BigInt(kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.reserve0.quotient, this.reserve1.quotient))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.quotient, JSBI.subtract(rootK, rootKLast))\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(CurrencyAmount.fromRawAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return CurrencyAmount.fromRawAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.quotient, this.reserveOf(token).quotient), totalSupplyAdjusted.quotient)\n    )\n  }\n}\n","import { BigintIsh } from '../types'\nimport { Fraction } from './Fraction'\nimport JSBI from 'jsbi'\nimport { Rounding } from '../enums'\n\nconst ONE_HUNDRED = new Fraction(JSBI.BigInt(100))\n\n/**\n * Converts a fraction to a percent\n * @param fraction the fraction to convert\n */\nfunction toPercent(fraction: Fraction): Percent {\n  return new Percent(fraction.numerator, fraction.denominator)\n}\n\nexport class Percent extends Fraction {\n  /**\n   * This boolean prevents a fraction from being interpreted as a Percent\n   */\n  public readonly isPercent: true = true\n\n  add(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.add(other))\n  }\n\n  subtract(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.subtract(other))\n  }\n\n  multiply(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.multiply(other))\n  }\n\n  divide(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.divide(other))\n  }\n\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return super.multiply(ONE_HUNDRED).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return super.multiply(ONE_HUNDRED).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import { Currency } from './Currency'\nimport { Pair } from './Pair'\nimport { Price } from './Price'\nimport { Token } from './Token'\nimport invariant from 'tiny-invariant'\n\nexport class Route<TInput extends Currency, TOutput extends Currency> {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly input: TInput\n  public readonly output: TOutput\n\n  public constructor(pairs: Pair[], input: TInput, output: TOutput) {\n    invariant(pairs.length > 0, 'PAIRS')\n    const chainId: number = pairs[0].chainId\n    invariant(\n      pairs.every((pair) => pair.chainId === chainId),\n      'CHAIN_IDS'\n    )\n\n    const wrappedInput = input.wrapped\n    invariant(pairs[0].involvesToken(wrappedInput), 'INPUT')\n    invariant(typeof output === 'undefined' || pairs[pairs.length - 1].involvesToken(output.wrapped), 'OUTPUT')\n\n    const path: Token[] = [wrappedInput]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n\n    this.pairs = pairs\n    this.path = path\n    this.input = input\n    this.output = output\n  }\n\n  private _midPrice: Price<TInput, TOutput> | null = null\n\n  public get midPrice(): Price<TInput, TOutput> {\n    if (this._midPrice !== null) return this._midPrice\n    const prices: Price<Currency, Currency>[] = []\n    for (const [i, pair] of this.pairs.entries()) {\n      prices.push(\n        this.path[i].equals(pair.token0)\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.quotient, pair.reserve1.quotient)\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.quotient, pair.reserve0.quotient)\n      )\n    }\n    const reduced = prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n    return (this._midPrice = new Price(this.input, this.output, reduced.denominator, reduced.numerator))\n  }\n\n  public get chainId(): number {\n    return this.pairs[0].chainId\n  }\n}\n","import { Currency, CurrencyAmount, Percent, Price } from '../entities'\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nexport function computePriceImpact<TBase extends Currency, TQuote extends Currency>(\n  midPrice: Price<TBase, TQuote>,\n  inputAmount: CurrencyAmount<TBase>,\n  outputAmount: CurrencyAmount<TQuote>\n): Percent {\n  const quotedOutputAmount = midPrice.quote(inputAmount)\n  // calculate price impact := (exactQuote - outputAmount) / exactQuote\n  const priceImpact = quotedOutputAmount.subtract(outputAmount).divide(quotedOutputAmount)\n  return new Percent(priceImpact.numerator, priceImpact.denominator)\n}\n","import invariant from 'tiny-invariant'\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n","import { ONE, ZERO } from '../constants'\n\nimport { Currency } from './Currency'\nimport { CurrencyAmount } from './CurrencyAmount'\nimport { Fraction } from './Fraction'\nimport { Pair } from './Pair'\nimport { Percent } from './Percent'\nimport { Price } from './Price'\nimport { Route } from './Route'\nimport { Token } from './Token'\nimport { TradeType } from '../enums'\nimport { computePriceImpact } from '../functions/computePriceImpact'\nimport invariant from 'tiny-invariant'\nimport { sortedInsert } from '../functions/sortedInsert'\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput<TInput extends Currency, TOutput extends Currency> {\n  readonly inputAmount: CurrencyAmount<TInput>\n  readonly outputAmount: CurrencyAmount<TOutput>\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator<TInput extends Currency, TOutput extends Currency>(\n  a: InputOutput<TInput, TOutput>,\n  b: InputOutput<TInput, TOutput>\n): number {\n  // must have same input and output token for comparison\n  invariant(a.inputAmount.currency.equals(b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(a.outputAmount.currency.equals(b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType>(\n  a: Trade<TInput, TOutput, TTradeType>,\n  b: Trade<TInput, TOutput, TTradeType>\n) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType> {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through and the input/output currencies.\n   */\n  public readonly route: Route<TInput, TOutput>\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TTradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount<TInput>\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount<TOutput>\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price<TInput, TOutput>\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn<TInput extends Currency, TOutput extends Currency>(\n    route: Route<TInput, TOutput>,\n    amountIn: CurrencyAmount<TInput>\n  ): Trade<TInput, TOutput, TradeType.EXACT_INPUT> {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut<TInput extends Currency, TOutput extends Currency>(\n    route: Route<TInput, TOutput>,\n    amountOut: CurrencyAmount<TOutput>\n  ): Trade<TInput, TOutput, TradeType.EXACT_OUTPUT> {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  public constructor(\n    route: Route<TInput, TOutput>,\n    amount: TTradeType extends TradeType.EXACT_INPUT ? CurrencyAmount<TInput> : CurrencyAmount<TOutput>,\n    tradeType: TTradeType\n  ) {\n    this.route = route\n    this.tradeType = tradeType\n\n    const tokenAmounts: CurrencyAmount<Token>[] = new Array(route.path.length)\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(amount.currency.equals(route.input), 'INPUT')\n      tokenAmounts[0] = amount.wrapped\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount] = pair.getOutputAmount(tokenAmounts[i])\n        tokenAmounts[i + 1] = outputAmount\n      }\n      this.inputAmount = CurrencyAmount.fromFractionalAmount(route.input, amount.numerator, amount.denominator)\n      this.outputAmount = CurrencyAmount.fromFractionalAmount(\n        route.output,\n        tokenAmounts[tokenAmounts.length - 1].numerator,\n        tokenAmounts[tokenAmounts.length - 1].denominator\n      )\n    } else {\n      invariant(amount.currency.equals(route.output), 'OUTPUT')\n      tokenAmounts[tokenAmounts.length - 1] = amount.wrapped\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount] = pair.getInputAmount(tokenAmounts[i])\n        tokenAmounts[i - 1] = inputAmount\n      }\n      this.inputAmount = CurrencyAmount.fromFractionalAmount(\n        route.input,\n        tokenAmounts[0].numerator,\n        tokenAmounts[0].denominator\n      )\n      this.outputAmount = CurrencyAmount.fromFractionalAmount(route.output, amount.numerator, amount.denominator)\n    }\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.quotient,\n      this.outputAmount.quotient\n    )\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount<TOutput> {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.quotient).quotient\n      return CurrencyAmount.fromRawAmount(this.outputAmount.currency, slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount<TInput> {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE)\n        .add(slippageTolerance)\n        .multiply(this.inputAmount.quotient).quotient\n      return CurrencyAmount.fromRawAmount(this.inputAmount.currency, slippageAdjustedAmountIn)\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param nextAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param currencyAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactIn<TInput extends Currency, TOutput extends Currency>(\n    pairs: Pair[],\n    currencyAmountIn: CurrencyAmount<TInput>,\n    currencyOut: TOutput,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    nextAmountIn: CurrencyAmount<Currency> = currencyAmountIn,\n    bestTrades: Trade<TInput, TOutput, TradeType.EXACT_INPUT>[] = []\n  ): Trade<TInput, TOutput, TradeType.EXACT_INPUT>[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(currencyAmountIn === nextAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n\n    const amountIn = nextAmountIn.wrapped\n    const tokenOut = currencyOut.wrapped\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.currency) && !pair.token1.equals(amountIn.currency)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: CurrencyAmount<Token>\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.currency.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([...currentPairs, pair], currencyAmountIn.currency, currencyOut),\n            currencyAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          currencyAmountIn,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1,\n          },\n          [...currentPairs, pair],\n          amountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * Return the execution price after accounting for slippage tolerance\n   * @param slippageTolerance the allowed tolerated slippage\n   */\n  public worstExecutionPrice(slippageTolerance: Percent): Price<TInput, TOutput> {\n    return new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.maximumAmountIn(slippageTolerance).quotient,\n      this.minimumAmountOut(slippageTolerance).quotient\n    )\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param nextAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param currencyAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOut<TInput extends Currency, TOutput extends Currency>(\n    pairs: Pair[],\n    currencyIn: TInput,\n    currencyAmountOut: CurrencyAmount<TOutput>,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    nextAmountOut: CurrencyAmount<Currency> = currencyAmountOut,\n    bestTrades: Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[] = []\n  ): Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(currencyAmountOut === nextAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n\n    const amountOut = nextAmountOut.wrapped\n    const tokenIn = currencyIn.wrapped\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.currency) && !pair.token1.equals(amountOut.currency)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: CurrencyAmount<Token>\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if (error.isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.currency.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([pair, ...currentPairs], currencyIn, currencyAmountOut.currency),\n            currencyAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          currencyIn,\n          currencyAmountOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1,\n          },\n          [pair, ...currentPairs],\n          amountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n","import { JsonRpcSigner, Web3Provider } from '@ethersproject/providers'\n\n// account is not optional\nexport function getSigner(library: Web3Provider, account: string): JsonRpcSigner {\n  return library.getSigner(account).connectUnchecked()\n}\n\n// account is optional\nexport function getProviderOrSigner(library: Web3Provider, account?: string): Web3Provider | JsonRpcSigner {\n  return account ? getSigner(library, account) : library\n}\n","import JSBI from 'jsbi'\n\nimport { ONE, ZERO } from '../constants'\nimport { Rebase } from '../interfaces'\n\nexport function rebase(value: JSBI, from: JSBI, to: JSBI): JSBI {\n  return from ? JSBI.divide(JSBI.multiply(value, to), from) : ZERO\n}\n\nexport function toElastic(total: Rebase, base: JSBI, roundUp: boolean): JSBI {\n  let elastic: JSBI\n  if (JSBI.equal(total.base, ZERO)) {\n    elastic = base\n  } else {\n    elastic = JSBI.divide(JSBI.multiply(base, total.elastic), total.base)\n    if (roundUp && JSBI.lessThan(JSBI.divide(JSBI.multiply(elastic, total.base), total.elastic), base)) {\n      elastic = JSBI.add(elastic, ONE)\n    }\n  }\n\n  return elastic\n}\n","import { SOLIDITY_TYPE_MAXIMA, SolidityType, ZERO } from '../constants'\n\nimport JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\n}\n","import { Currency } from './entities/Currency'\nimport { CurrencyAmount } from './entities/CurrencyAmount'\nimport { Percent } from './entities/Percent'\nimport { Token } from './entities/Token'\nimport { Trade } from './entities/Trade'\nimport { TradeType } from './enums/TradeType'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from './functions/validateAndParseAddress'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n}\n\nexport interface TradeOptionsDeadline extends Omit<TradeOptions, 'ttl'> {\n  /**\n   * When the transaction expires.\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\n   */\n  deadline: number\n}\n\n/**\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\n */\nexport interface SwapParameters {\n  /**\n   * The method to call on the Uniswap V2 Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nexport function toHex(currencyAmount: CurrencyAmount<Currency>) {\n  return `0x${currencyAmount.quotient.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(\n    trade: Trade<Currency, Currency, TradeType>,\n    options: TradeOptions | TradeOptionsDeadline\n  ): SwapParameters {\n    const etherIn = trade.inputAmount.currency.isNative\n    const etherOut = trade.outputAmount.currency.isNative\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n    const path: string[] = trade.route.path.map((token: Token) => token.address)\n    const deadline =\n      'ttl' in options\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n        : `0x${options.deadline.toString(16)}`\n\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n\n    let methodName: string\n    let args: (string | string[])[]\n    let value: string\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = useFeeOnTransfer\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n            : 'swapExactTokensForTokens'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        if (etherIn) {\n          methodName = 'swapETHForExactTokens'\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETH'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = 'swapTokensForExactTokens'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n    }\n    return {\n      methodName,\n      args,\n      value,\n    }\n  }\n}\n"],"names":["ChainId","ChainKey","Rounding","TradeType","USDC_ADDRESS","MAINNET","ROPSTEN","KOVAN","MATIC","FANTOM","BSC","HARMONY","HECO","OKEX","XDAI","ARBITRUM","AVALANCHE","FACTORY_ADDRESS","RINKEBY","GÖRLI","FANTOM_TESTNET","MATIC_TESTNET","BSC_TESTNET","ARBITRUM_TESTNET","MOONBEAM_TESTNET","AVALANCHE_TESTNET","HECO_TESTNET","HARMONY_TESTNET","OKEX_TESTNET","CELO","PALM","PALM_TESTNET","MOONRIVER","FUSE","ROUTER_ADDRESS","SUSHI_ADDRESS","MASTERCHEF_ADDRESS","BAR_ADDRESS","MAKER_ADDRESS","TIMELOCK_ADDRESS","BENTOBOX_ADDRESS","KASHI_ADDRESS","SUSHISWAP_SWAPPER_ADDRESS","SUSHISWAP_MULTISWAPPER_ADDRESS","SUSHISWAP_MULTI_EXACT_SWAPPER_ADDRESS","PEGGED_ORACLE_ADDRESS","SUSHISWAP_TWAP_0_ORACLE_ADDRESS","SUSHISWAP_TWAP_1_ORACLE_ADDRESS","CHAINLINK_ORACLE_ADDRESS","BORING_HELPER_ADDRESS","ARCHER_ROUTER_ADDRESS","MINICHEF_ADDRESS","WETH9_ADDRESS","WNATIVE_ADDRESS","MASTERCHEF_V2_ADDRESS","ENS_REGISTRAR_ADDRESS","ZAPPER_ADDRESS","MERKLE_DISTRIBUTOR_ADDRESS","MULTICALL2_ADDRESS","AbstractCurrency","chainId","decimals","symbol","name","Number","isSafeInteger","invariant","isInteger","NativeCurrency","validateAndParseAddress","address","checksummedAddress","getAddress","warning","error","Token","equals","other","isToken","sortsBefore","toLowerCase","currencyEquals","currencyA","currencyB","USDC","WETH9","WNATIVE","Avalanche","onChain","_cache","isNative","wnative","Binance","Celo","wcelo","Ether","_etherCache","weth9","Fantom","Harmony","Heco","Matic","Movr","Okex","xDai","Palm","Fuse","NATIVE","MaxUint256","JSBI","BigInt","ZERO","ONE","TWO","THREE","FIVE","TEN","_100","_997","_1000","CHAIN_KEY","INIT_CODE_HASH","MINIMUM_LIQUIDITY","SolidityType","SOLIDITY_TYPE_MAXIMA","uint8","uint256","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","constructor","setPrototypeOf","prototype","Error","InsufficientInputAmountError","Decimal","toFormat","_Decimal","Big","_Big","strict","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","numerator","denominator","tryParseFraction","fractionish","invert","add","otherParsed","equal","multiply","subtract","lessThan","equalTo","greaterThan","divide","toSignificant","significantDigits","format","rounding","groupSeparator","set","precision","quotient","toString","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","remainder","CurrencyAmount","currency","lessThanOrEqual","decimalScale","exponentiate","fromRawAmount","rawAmount","fromFractionalAmount","added","subtracted","multiplied","divided","toExact","wrapped","Price","baseCurrency","quoteCurrency","args","length","result","quoteAmount","baseAmount","scalar","fraction","quote","currencyAmount","adjustedForDecimals","computePairAddress","factoryAddress","tokenA","tokenB","token0","token1","getCreate2Address","keccak256","pack","MAX_SAFE_INTEGER","sqrt","value","greaterThanOrEqual","Math","floor","toNumber","z","x","minimum","lowest","i","LT","maximum","highest","GT","difference","a","b","Pair","currencyAmountA","currencyAmountB","currencyAmounts","liquidityToken","tokenAmounts","involvesToken","token","priceOf","token0Price","token1Price","reserveOf","reserve0","reserve1","getOutputAmount","inputAmount","inputReserve","outputReserve","inputAmountWithFee","outputAmount","getInputAmount","getLiquidityMinted","totalSupply","tokenAmountA","tokenAmountB","liquidity","amount0","amount1","console","log","kLast","getLiquidityValue","feeOn","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","ONE_HUNDRED","toPercent","Percent","Route","pairs","input","output","every","pair","wrappedInput","path","entries","currentInput","push","_midPrice","prices","reduced","slice","reduce","accumulator","currentValue","computePriceImpact","midPrice","quotedOutputAmount","priceImpact","sortedInsert","items","maxSize","comparator","isFull","lo","hi","mid","splice","pop","inputOutputComparator","tradeComparator","ioComp","route","Trade","amount","tradeType","Array","EXACT_INPUT","executionPrice","exactIn","amountIn","exactOut","amountOut","EXACT_OUTPUT","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","currentPairs","nextAmountIn","bestTrades","maxNumResults","maxHops","tokenOut","isInsufficientInputAmountError","pairsExcludingThisPair","concat","worstExecutionPrice","bestTradeExactOut","currencyIn","currencyAmountOut","nextAmountOut","tokenIn","isInsufficientReservesError","getSigner","library","account","connectUnchecked","getProviderOrSigner","rebase","from","to","toElastic","total","base","roundUp","elastic","validateSolidityTypeInstance","solidityType","toHex","ZERO_HEX","Router","swapCallParameters","trade","options","etherIn","etherOut","ttl","recipient","allowedSlippage","map","deadline","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer","methodName"],"mappings":"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"}